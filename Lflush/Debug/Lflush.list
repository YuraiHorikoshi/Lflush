
Lflush.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003390  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003518  08003518  00013518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003550  08003550  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003550  08003550  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003550  08003550  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003550  08003550  00013550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003554  08003554  00013554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003558  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  08003564  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08003564  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000afb5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000171a  00000000  00000000  0002aff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b80  00000000  00000000  0002c710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af8  00000000  00000000  0002d290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5b2  00000000  00000000  0002dd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c59d  00000000  00000000  0004833a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a04fd  00000000  00000000  000548d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f4dd4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030a8  00000000  00000000  000f4e28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003500 	.word	0x08003500

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003500 	.word	0x08003500

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80001cc:	f000 fa82 	bl	80006d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f828 	bl	8000224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f90e 	bl	80003f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001d8:	f000 f8dc 	bl	8000394 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80001dc:	f000 f864 	bl	80002a8 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 80001e0:	2104      	movs	r1, #4
 80001e2:	480e      	ldr	r0, [pc, #56]	; (800021c <main+0x54>)
 80001e4:	f001 ff66 	bl	80020b4 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,35);
 80001e8:	4b0c      	ldr	r3, [pc, #48]	; (800021c <main+0x54>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	2223      	movs	r2, #35	; 0x23
 80001ee:	639a      	str	r2, [r3, #56]	; 0x38
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,SET);
 80001f0:	2201      	movs	r2, #1
 80001f2:	2108      	movs	r1, #8
 80001f4:	480a      	ldr	r0, [pc, #40]	; (8000220 <main+0x58>)
 80001f6:	f000 fd4f 	bl	8000c98 <HAL_GPIO_WritePin>
	  HAL_Delay(3000);
 80001fa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80001fe:	f000 facf 	bl	80007a0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,RESET);
 8000202:	2200      	movs	r2, #0
 8000204:	2108      	movs	r1, #8
 8000206:	4806      	ldr	r0, [pc, #24]	; (8000220 <main+0x58>)
 8000208:	f000 fd46 	bl	8000c98 <HAL_GPIO_WritePin>
	  HAL_Delay(3000);
 800020c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000210:	f000 fac6 	bl	80007a0 <HAL_Delay>
	 /*/
	  if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)==0)
	  {
	  */

	 	 HAL_Delay(10);
 8000214:	200a      	movs	r0, #10
 8000216:	f000 fac3 	bl	80007a0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,SET);
 800021a:	e7e9      	b.n	80001f0 <main+0x28>
 800021c:	20000028 	.word	0x20000028
 8000220:	48000400 	.word	0x48000400

08000224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b090      	sub	sp, #64	; 0x40
 8000228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022a:	f107 0318 	add.w	r3, r7, #24
 800022e:	2228      	movs	r2, #40	; 0x28
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f003 f95c 	bl	80034f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000238:	1d3b      	adds	r3, r7, #4
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	605a      	str	r2, [r3, #4]
 8000240:	609a      	str	r2, [r3, #8]
 8000242:	60da      	str	r2, [r3, #12]
 8000244:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000246:	2302      	movs	r3, #2
 8000248:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024a:	2301      	movs	r3, #1
 800024c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800024e:	2310      	movs	r3, #16
 8000250:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000252:	2302      	movs	r3, #2
 8000254:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000256:	2300      	movs	r3, #0
 8000258:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800025a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800025e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000260:	f107 0318 	add.w	r3, r7, #24
 8000264:	4618      	mov	r0, r3
 8000266:	f000 fd2f 	bl	8000cc8 <HAL_RCC_OscConfig>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000270:	f000 f90a 	bl	8000488 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000274:	230f      	movs	r3, #15
 8000276:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000278:	2302      	movs	r3, #2
 800027a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000280:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000284:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	2102      	movs	r1, #2
 800028e:	4618      	mov	r0, r3
 8000290:	f001 fc22 	bl	8001ad8 <HAL_RCC_ClockConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800029a:	f000 f8f5 	bl	8000488 <Error_Handler>
  }
}
 800029e:	bf00      	nop
 80002a0:	3740      	adds	r7, #64	; 0x40
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
	...

080002a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b08e      	sub	sp, #56	; 0x38
 80002ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
 80002ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002bc:	f107 031c 	add.w	r3, r7, #28
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]
 80002c4:	605a      	str	r2, [r3, #4]
 80002c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002c8:	463b      	mov	r3, r7
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
 80002d2:	60da      	str	r2, [r3, #12]
 80002d4:	611a      	str	r2, [r3, #16]
 80002d6:	615a      	str	r2, [r3, #20]
 80002d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002da:	4b2d      	ldr	r3, [pc, #180]	; (8000390 <MX_TIM2_Init+0xe8>)
 80002dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 80002e2:	4b2b      	ldr	r3, [pc, #172]	; (8000390 <MX_TIM2_Init+0xe8>)
 80002e4:	223f      	movs	r2, #63	; 0x3f
 80002e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002e8:	4b29      	ldr	r3, [pc, #164]	; (8000390 <MX_TIM2_Init+0xe8>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39;
 80002ee:	4b28      	ldr	r3, [pc, #160]	; (8000390 <MX_TIM2_Init+0xe8>)
 80002f0:	2227      	movs	r2, #39	; 0x27
 80002f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002f4:	4b26      	ldr	r3, [pc, #152]	; (8000390 <MX_TIM2_Init+0xe8>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80002fa:	4b25      	ldr	r3, [pc, #148]	; (8000390 <MX_TIM2_Init+0xe8>)
 80002fc:	2280      	movs	r2, #128	; 0x80
 80002fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000300:	4823      	ldr	r0, [pc, #140]	; (8000390 <MX_TIM2_Init+0xe8>)
 8000302:	f001 fe1f 	bl	8001f44 <HAL_TIM_Base_Init>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800030c:	f000 f8bc 	bl	8000488 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000314:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000316:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800031a:	4619      	mov	r1, r3
 800031c:	481c      	ldr	r0, [pc, #112]	; (8000390 <MX_TIM2_Init+0xe8>)
 800031e:	f002 f8c5 	bl	80024ac <HAL_TIM_ConfigClockSource>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000328:	f000 f8ae 	bl	8000488 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800032c:	4818      	ldr	r0, [pc, #96]	; (8000390 <MX_TIM2_Init+0xe8>)
 800032e:	f001 fe60 	bl	8001ff2 <HAL_TIM_PWM_Init>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000338:	f000 f8a6 	bl	8000488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800033c:	2300      	movs	r3, #0
 800033e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000340:	2300      	movs	r3, #0
 8000342:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000344:	f107 031c 	add.w	r3, r7, #28
 8000348:	4619      	mov	r1, r3
 800034a:	4811      	ldr	r0, [pc, #68]	; (8000390 <MX_TIM2_Init+0xe8>)
 800034c:	f002 fd52 	bl	8002df4 <HAL_TIMEx_MasterConfigSynchronization>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000356:	f000 f897 	bl	8000488 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800035a:	2360      	movs	r3, #96	; 0x60
 800035c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800035e:	2300      	movs	r3, #0
 8000360:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000362:	2300      	movs	r3, #0
 8000364:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000366:	2300      	movs	r3, #0
 8000368:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800036a:	463b      	mov	r3, r7
 800036c:	2204      	movs	r2, #4
 800036e:	4619      	mov	r1, r3
 8000370:	4807      	ldr	r0, [pc, #28]	; (8000390 <MX_TIM2_Init+0xe8>)
 8000372:	f001 ff8b 	bl	800228c <HAL_TIM_PWM_ConfigChannel>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800037c:	f000 f884 	bl	8000488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000380:	4803      	ldr	r0, [pc, #12]	; (8000390 <MX_TIM2_Init+0xe8>)
 8000382:	f000 f8c9 	bl	8000518 <HAL_TIM_MspPostInit>

}
 8000386:	bf00      	nop
 8000388:	3738      	adds	r7, #56	; 0x38
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	20000028 	.word	0x20000028

08000394 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000398:	4b14      	ldr	r3, [pc, #80]	; (80003ec <MX_USART2_UART_Init+0x58>)
 800039a:	4a15      	ldr	r2, [pc, #84]	; (80003f0 <MX_USART2_UART_Init+0x5c>)
 800039c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800039e:	4b13      	ldr	r3, [pc, #76]	; (80003ec <MX_USART2_UART_Init+0x58>)
 80003a0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80003a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003a6:	4b11      	ldr	r3, [pc, #68]	; (80003ec <MX_USART2_UART_Init+0x58>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003ac:	4b0f      	ldr	r3, [pc, #60]	; (80003ec <MX_USART2_UART_Init+0x58>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003b2:	4b0e      	ldr	r3, [pc, #56]	; (80003ec <MX_USART2_UART_Init+0x58>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003b8:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <MX_USART2_UART_Init+0x58>)
 80003ba:	220c      	movs	r2, #12
 80003bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003be:	4b0b      	ldr	r3, [pc, #44]	; (80003ec <MX_USART2_UART_Init+0x58>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003c4:	4b09      	ldr	r3, [pc, #36]	; (80003ec <MX_USART2_UART_Init+0x58>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003ca:	4b08      	ldr	r3, [pc, #32]	; (80003ec <MX_USART2_UART_Init+0x58>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003d0:	4b06      	ldr	r3, [pc, #24]	; (80003ec <MX_USART2_UART_Init+0x58>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003d6:	4805      	ldr	r0, [pc, #20]	; (80003ec <MX_USART2_UART_Init+0x58>)
 80003d8:	f002 fd7a 	bl	8002ed0 <HAL_UART_Init>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003e2:	f000 f851 	bl	8000488 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003e6:	bf00      	nop
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	20000074 	.word	0x20000074
 80003f0:	40004400 	.word	0x40004400

080003f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b088      	sub	sp, #32
 80003f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fa:	f107 030c 	add.w	r3, r7, #12
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	605a      	str	r2, [r3, #4]
 8000404:	609a      	str	r2, [r3, #8]
 8000406:	60da      	str	r2, [r3, #12]
 8000408:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800040a:	4b1d      	ldr	r3, [pc, #116]	; (8000480 <MX_GPIO_Init+0x8c>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	4a1c      	ldr	r2, [pc, #112]	; (8000480 <MX_GPIO_Init+0x8c>)
 8000410:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000414:	6153      	str	r3, [r2, #20]
 8000416:	4b1a      	ldr	r3, [pc, #104]	; (8000480 <MX_GPIO_Init+0x8c>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800041e:	60bb      	str	r3, [r7, #8]
 8000420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000422:	4b17      	ldr	r3, [pc, #92]	; (8000480 <MX_GPIO_Init+0x8c>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	4a16      	ldr	r2, [pc, #88]	; (8000480 <MX_GPIO_Init+0x8c>)
 8000428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800042c:	6153      	str	r3, [r2, #20]
 800042e:	4b14      	ldr	r3, [pc, #80]	; (8000480 <MX_GPIO_Init+0x8c>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000436:	607b      	str	r3, [r7, #4]
 8000438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800043a:	4b11      	ldr	r3, [pc, #68]	; (8000480 <MX_GPIO_Init+0x8c>)
 800043c:	695b      	ldr	r3, [r3, #20]
 800043e:	4a10      	ldr	r2, [pc, #64]	; (8000480 <MX_GPIO_Init+0x8c>)
 8000440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000444:	6153      	str	r3, [r2, #20]
 8000446:	4b0e      	ldr	r3, [pc, #56]	; (8000480 <MX_GPIO_Init+0x8c>)
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800044e:	603b      	str	r3, [r7, #0]
 8000450:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000452:	2200      	movs	r2, #0
 8000454:	2108      	movs	r1, #8
 8000456:	480b      	ldr	r0, [pc, #44]	; (8000484 <MX_GPIO_Init+0x90>)
 8000458:	f000 fc1e 	bl	8000c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800045c:	2308      	movs	r3, #8
 800045e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000460:	2301      	movs	r3, #1
 8000462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000464:	2300      	movs	r3, #0
 8000466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000468:	2300      	movs	r3, #0
 800046a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800046c:	f107 030c 	add.w	r3, r7, #12
 8000470:	4619      	mov	r1, r3
 8000472:	4804      	ldr	r0, [pc, #16]	; (8000484 <MX_GPIO_Init+0x90>)
 8000474:	f000 fa9e 	bl	80009b4 <HAL_GPIO_Init>

}
 8000478:	bf00      	nop
 800047a:	3720      	adds	r7, #32
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	40021000 	.word	0x40021000
 8000484:	48000400 	.word	0x48000400

08000488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800048c:	b672      	cpsid	i
}
 800048e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000490:	e7fe      	b.n	8000490 <Error_Handler+0x8>
	...

08000494 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800049a:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <HAL_MspInit+0x44>)
 800049c:	699b      	ldr	r3, [r3, #24]
 800049e:	4a0e      	ldr	r2, [pc, #56]	; (80004d8 <HAL_MspInit+0x44>)
 80004a0:	f043 0301 	orr.w	r3, r3, #1
 80004a4:	6193      	str	r3, [r2, #24]
 80004a6:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <HAL_MspInit+0x44>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	f003 0301 	and.w	r3, r3, #1
 80004ae:	607b      	str	r3, [r7, #4]
 80004b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004b2:	4b09      	ldr	r3, [pc, #36]	; (80004d8 <HAL_MspInit+0x44>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	4a08      	ldr	r2, [pc, #32]	; (80004d8 <HAL_MspInit+0x44>)
 80004b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004bc:	61d3      	str	r3, [r2, #28]
 80004be:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <HAL_MspInit+0x44>)
 80004c0:	69db      	ldr	r3, [r3, #28]
 80004c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004c6:	603b      	str	r3, [r7, #0]
 80004c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ca:	bf00      	nop
 80004cc:	370c      	adds	r7, #12
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	40021000 	.word	0x40021000

080004dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004ec:	d10b      	bne.n	8000506 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80004ee:	4b09      	ldr	r3, [pc, #36]	; (8000514 <HAL_TIM_Base_MspInit+0x38>)
 80004f0:	69db      	ldr	r3, [r3, #28]
 80004f2:	4a08      	ldr	r2, [pc, #32]	; (8000514 <HAL_TIM_Base_MspInit+0x38>)
 80004f4:	f043 0301 	orr.w	r3, r3, #1
 80004f8:	61d3      	str	r3, [r2, #28]
 80004fa:	4b06      	ldr	r3, [pc, #24]	; (8000514 <HAL_TIM_Base_MspInit+0x38>)
 80004fc:	69db      	ldr	r3, [r3, #28]
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000506:	bf00      	nop
 8000508:	3714      	adds	r7, #20
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	40021000 	.word	0x40021000

08000518 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b088      	sub	sp, #32
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000538:	d11c      	bne.n	8000574 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800053a:	4b10      	ldr	r3, [pc, #64]	; (800057c <HAL_TIM_MspPostInit+0x64>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	4a0f      	ldr	r2, [pc, #60]	; (800057c <HAL_TIM_MspPostInit+0x64>)
 8000540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000544:	6153      	str	r3, [r2, #20]
 8000546:	4b0d      	ldr	r3, [pc, #52]	; (800057c <HAL_TIM_MspPostInit+0x64>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000552:	2302      	movs	r3, #2
 8000554:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000556:	2302      	movs	r3, #2
 8000558:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055a:	2300      	movs	r3, #0
 800055c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055e:	2300      	movs	r3, #0
 8000560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000562:	2301      	movs	r3, #1
 8000564:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000566:	f107 030c 	add.w	r3, r7, #12
 800056a:	4619      	mov	r1, r3
 800056c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000570:	f000 fa20 	bl	80009b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000574:	bf00      	nop
 8000576:	3720      	adds	r7, #32
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40021000 	.word	0x40021000

08000580 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08a      	sub	sp, #40	; 0x28
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a18      	ldr	r2, [pc, #96]	; (8000600 <HAL_UART_MspInit+0x80>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d129      	bne.n	80005f6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005a2:	4b18      	ldr	r3, [pc, #96]	; (8000604 <HAL_UART_MspInit+0x84>)
 80005a4:	69db      	ldr	r3, [r3, #28]
 80005a6:	4a17      	ldr	r2, [pc, #92]	; (8000604 <HAL_UART_MspInit+0x84>)
 80005a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ac:	61d3      	str	r3, [r2, #28]
 80005ae:	4b15      	ldr	r3, [pc, #84]	; (8000604 <HAL_UART_MspInit+0x84>)
 80005b0:	69db      	ldr	r3, [r3, #28]
 80005b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005b6:	613b      	str	r3, [r7, #16]
 80005b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	4b12      	ldr	r3, [pc, #72]	; (8000604 <HAL_UART_MspInit+0x84>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	4a11      	ldr	r2, [pc, #68]	; (8000604 <HAL_UART_MspInit+0x84>)
 80005c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c4:	6153      	str	r3, [r2, #20]
 80005c6:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <HAL_UART_MspInit+0x84>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80005d2:	f248 0304 	movw	r3, #32772	; 0x8004
 80005d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d8:	2302      	movs	r3, #2
 80005da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	2300      	movs	r3, #0
 80005de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005e0:	2303      	movs	r3, #3
 80005e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80005e4:	2307      	movs	r3, #7
 80005e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e8:	f107 0314 	add.w	r3, r7, #20
 80005ec:	4619      	mov	r1, r3
 80005ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f2:	f000 f9df 	bl	80009b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005f6:	bf00      	nop
 80005f8:	3728      	adds	r7, #40	; 0x28
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40004400 	.word	0x40004400
 8000604:	40021000 	.word	0x40021000

08000608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800060c:	e7fe      	b.n	800060c <NMI_Handler+0x4>

0800060e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000612:	e7fe      	b.n	8000612 <HardFault_Handler+0x4>

08000614 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000618:	e7fe      	b.n	8000618 <MemManage_Handler+0x4>

0800061a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800061e:	e7fe      	b.n	800061e <BusFault_Handler+0x4>

08000620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000624:	e7fe      	b.n	8000624 <UsageFault_Handler+0x4>

08000626 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000626:	b480      	push	{r7}
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800062a:	bf00      	nop
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr

08000634 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr

08000642 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000642:	b480      	push	{r7}
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000646:	bf00      	nop
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000654:	f000 f884 	bl	8000760 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}

0800065c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <SystemInit+0x20>)
 8000662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000666:	4a05      	ldr	r2, [pc, #20]	; (800067c <SystemInit+0x20>)
 8000668:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800066c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000680:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006b8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000684:	480d      	ldr	r0, [pc, #52]	; (80006bc <LoopForever+0x6>)
  ldr r1, =_edata
 8000686:	490e      	ldr	r1, [pc, #56]	; (80006c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000688:	4a0e      	ldr	r2, [pc, #56]	; (80006c4 <LoopForever+0xe>)
  movs r3, #0
 800068a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800068c:	e002      	b.n	8000694 <LoopCopyDataInit>

0800068e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800068e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000692:	3304      	adds	r3, #4

08000694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000698:	d3f9      	bcc.n	800068e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800069a:	4a0b      	ldr	r2, [pc, #44]	; (80006c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800069c:	4c0b      	ldr	r4, [pc, #44]	; (80006cc <LoopForever+0x16>)
  movs r3, #0
 800069e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a0:	e001      	b.n	80006a6 <LoopFillZerobss>

080006a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006a4:	3204      	adds	r2, #4

080006a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a8:	d3fb      	bcc.n	80006a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006aa:	f7ff ffd7 	bl	800065c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006ae:	f002 fefb 	bl	80034a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006b2:	f7ff fd89 	bl	80001c8 <main>

080006b6 <LoopForever>:

LoopForever:
    b LoopForever
 80006b6:	e7fe      	b.n	80006b6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006b8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80006bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006c4:	08003558 	.word	0x08003558
  ldr r2, =_sbss
 80006c8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006cc:	200000fc 	.word	0x200000fc

080006d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006d0:	e7fe      	b.n	80006d0 <ADC1_2_IRQHandler>
	...

080006d4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006d8:	4b08      	ldr	r3, [pc, #32]	; (80006fc <HAL_Init+0x28>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a07      	ldr	r2, [pc, #28]	; (80006fc <HAL_Init+0x28>)
 80006de:	f043 0310 	orr.w	r3, r3, #16
 80006e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006e4:	2003      	movs	r0, #3
 80006e6:	f000 f931 	bl	800094c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ea:	2000      	movs	r0, #0
 80006ec:	f000 f808 	bl	8000700 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006f0:	f7ff fed0 	bl	8000494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006f4:	2300      	movs	r3, #0
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40022000 	.word	0x40022000

08000700 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <HAL_InitTick+0x54>)
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	4b12      	ldr	r3, [pc, #72]	; (8000758 <HAL_InitTick+0x58>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	4619      	mov	r1, r3
 8000712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000716:	fbb3 f3f1 	udiv	r3, r3, r1
 800071a:	fbb2 f3f3 	udiv	r3, r2, r3
 800071e:	4618      	mov	r0, r3
 8000720:	f000 f93b 	bl	800099a <HAL_SYSTICK_Config>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800072a:	2301      	movs	r3, #1
 800072c:	e00e      	b.n	800074c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2b0f      	cmp	r3, #15
 8000732:	d80a      	bhi.n	800074a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000734:	2200      	movs	r2, #0
 8000736:	6879      	ldr	r1, [r7, #4]
 8000738:	f04f 30ff 	mov.w	r0, #4294967295
 800073c:	f000 f911 	bl	8000962 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000740:	4a06      	ldr	r2, [pc, #24]	; (800075c <HAL_InitTick+0x5c>)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000746:	2300      	movs	r3, #0
 8000748:	e000      	b.n	800074c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800074a:	2301      	movs	r3, #1
}
 800074c:	4618      	mov	r0, r3
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000000 	.word	0x20000000
 8000758:	20000008 	.word	0x20000008
 800075c:	20000004 	.word	0x20000004

08000760 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <HAL_IncTick+0x20>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	461a      	mov	r2, r3
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <HAL_IncTick+0x24>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4413      	add	r3, r2
 8000770:	4a04      	ldr	r2, [pc, #16]	; (8000784 <HAL_IncTick+0x24>)
 8000772:	6013      	str	r3, [r2, #0]
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	20000008 	.word	0x20000008
 8000784:	200000f8 	.word	0x200000f8

08000788 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  return uwTick;  
 800078c:	4b03      	ldr	r3, [pc, #12]	; (800079c <HAL_GetTick+0x14>)
 800078e:	681b      	ldr	r3, [r3, #0]
}
 8000790:	4618      	mov	r0, r3
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	200000f8 	.word	0x200000f8

080007a0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007a8:	f7ff ffee 	bl	8000788 <HAL_GetTick>
 80007ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007b8:	d005      	beq.n	80007c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007ba:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <HAL_Delay+0x44>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	461a      	mov	r2, r3
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	4413      	add	r3, r2
 80007c4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80007c6:	bf00      	nop
 80007c8:	f7ff ffde 	bl	8000788 <HAL_GetTick>
 80007cc:	4602      	mov	r2, r0
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	68fa      	ldr	r2, [r7, #12]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d8f7      	bhi.n	80007c8 <HAL_Delay+0x28>
  {
  }
}
 80007d8:	bf00      	nop
 80007da:	bf00      	nop
 80007dc:	3710      	adds	r7, #16
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000008 	.word	0x20000008

080007e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	f003 0307 	and.w	r3, r3, #7
 80007f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <__NVIC_SetPriorityGrouping+0x44>)
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007fe:	68ba      	ldr	r2, [r7, #8]
 8000800:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000804:	4013      	ands	r3, r2
 8000806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000810:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800081a:	4a04      	ldr	r2, [pc, #16]	; (800082c <__NVIC_SetPriorityGrouping+0x44>)
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	60d3      	str	r3, [r2, #12]
}
 8000820:	bf00      	nop
 8000822:	3714      	adds	r7, #20
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	e000ed00 	.word	0xe000ed00

08000830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000834:	4b04      	ldr	r3, [pc, #16]	; (8000848 <__NVIC_GetPriorityGrouping+0x18>)
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	0a1b      	lsrs	r3, r3, #8
 800083a:	f003 0307 	and.w	r3, r3, #7
}
 800083e:	4618      	mov	r0, r3
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	e000ed00 	.word	0xe000ed00

0800084c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	6039      	str	r1, [r7, #0]
 8000856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085c:	2b00      	cmp	r3, #0
 800085e:	db0a      	blt.n	8000876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	b2da      	uxtb	r2, r3
 8000864:	490c      	ldr	r1, [pc, #48]	; (8000898 <__NVIC_SetPriority+0x4c>)
 8000866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086a:	0112      	lsls	r2, r2, #4
 800086c:	b2d2      	uxtb	r2, r2
 800086e:	440b      	add	r3, r1
 8000870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000874:	e00a      	b.n	800088c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	b2da      	uxtb	r2, r3
 800087a:	4908      	ldr	r1, [pc, #32]	; (800089c <__NVIC_SetPriority+0x50>)
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	f003 030f 	and.w	r3, r3, #15
 8000882:	3b04      	subs	r3, #4
 8000884:	0112      	lsls	r2, r2, #4
 8000886:	b2d2      	uxtb	r2, r2
 8000888:	440b      	add	r3, r1
 800088a:	761a      	strb	r2, [r3, #24]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	e000e100 	.word	0xe000e100
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b089      	sub	sp, #36	; 0x24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f003 0307 	and.w	r3, r3, #7
 80008b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008b4:	69fb      	ldr	r3, [r7, #28]
 80008b6:	f1c3 0307 	rsb	r3, r3, #7
 80008ba:	2b04      	cmp	r3, #4
 80008bc:	bf28      	it	cs
 80008be:	2304      	movcs	r3, #4
 80008c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	3304      	adds	r3, #4
 80008c6:	2b06      	cmp	r3, #6
 80008c8:	d902      	bls.n	80008d0 <NVIC_EncodePriority+0x30>
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	3b03      	subs	r3, #3
 80008ce:	e000      	b.n	80008d2 <NVIC_EncodePriority+0x32>
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d4:	f04f 32ff 	mov.w	r2, #4294967295
 80008d8:	69bb      	ldr	r3, [r7, #24]
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	43da      	mvns	r2, r3
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	401a      	ands	r2, r3
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e8:	f04f 31ff 	mov.w	r1, #4294967295
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	fa01 f303 	lsl.w	r3, r1, r3
 80008f2:	43d9      	mvns	r1, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f8:	4313      	orrs	r3, r2
         );
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3724      	adds	r7, #36	; 0x24
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
	...

08000908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	3b01      	subs	r3, #1
 8000914:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000918:	d301      	bcc.n	800091e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800091a:	2301      	movs	r3, #1
 800091c:	e00f      	b.n	800093e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800091e:	4a0a      	ldr	r2, [pc, #40]	; (8000948 <SysTick_Config+0x40>)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3b01      	subs	r3, #1
 8000924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000926:	210f      	movs	r1, #15
 8000928:	f04f 30ff 	mov.w	r0, #4294967295
 800092c:	f7ff ff8e 	bl	800084c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <SysTick_Config+0x40>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000936:	4b04      	ldr	r3, [pc, #16]	; (8000948 <SysTick_Config+0x40>)
 8000938:	2207      	movs	r2, #7
 800093a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800093c:	2300      	movs	r3, #0
}
 800093e:	4618      	mov	r0, r3
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	e000e010 	.word	0xe000e010

0800094c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f7ff ff47 	bl	80007e8 <__NVIC_SetPriorityGrouping>
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b086      	sub	sp, #24
 8000966:	af00      	add	r7, sp, #0
 8000968:	4603      	mov	r3, r0
 800096a:	60b9      	str	r1, [r7, #8]
 800096c:	607a      	str	r2, [r7, #4]
 800096e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000974:	f7ff ff5c 	bl	8000830 <__NVIC_GetPriorityGrouping>
 8000978:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	68b9      	ldr	r1, [r7, #8]
 800097e:	6978      	ldr	r0, [r7, #20]
 8000980:	f7ff ff8e 	bl	80008a0 <NVIC_EncodePriority>
 8000984:	4602      	mov	r2, r0
 8000986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800098a:	4611      	mov	r1, r2
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff ff5d 	bl	800084c <__NVIC_SetPriority>
}
 8000992:	bf00      	nop
 8000994:	3718      	adds	r7, #24
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	b082      	sub	sp, #8
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f7ff ffb0 	bl	8000908 <SysTick_Config>
 80009a8:	4603      	mov	r3, r0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b087      	sub	sp, #28
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009be:	2300      	movs	r3, #0
 80009c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009c2:	e14e      	b.n	8000c62 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	2101      	movs	r1, #1
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	fa01 f303 	lsl.w	r3, r1, r3
 80009d0:	4013      	ands	r3, r2
 80009d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	f000 8140 	beq.w	8000c5c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d00b      	beq.n	80009fc <HAL_GPIO_Init+0x48>
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d007      	beq.n	80009fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009f0:	2b11      	cmp	r3, #17
 80009f2:	d003      	beq.n	80009fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	2b12      	cmp	r3, #18
 80009fa:	d130      	bne.n	8000a5e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	2203      	movs	r2, #3
 8000a08:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	4013      	ands	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	68da      	ldr	r2, [r3, #12]
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a32:	2201      	movs	r2, #1
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	43db      	mvns	r3, r3
 8000a3c:	693a      	ldr	r2, [r7, #16]
 8000a3e:	4013      	ands	r3, r2
 8000a40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	091b      	lsrs	r3, r3, #4
 8000a48:	f003 0201 	and.w	r2, r3, #1
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	68db      	ldr	r3, [r3, #12]
 8000a62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	2203      	movs	r2, #3
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	43db      	mvns	r3, r3
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	4013      	ands	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	689a      	ldr	r2, [r3, #8]
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	d003      	beq.n	8000a9e <HAL_GPIO_Init+0xea>
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	2b12      	cmp	r3, #18
 8000a9c:	d123      	bne.n	8000ae6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	08da      	lsrs	r2, r3, #3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	3208      	adds	r2, #8
 8000aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	220f      	movs	r2, #15
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	43db      	mvns	r3, r3
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	691a      	ldr	r2, [r3, #16]
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	f003 0307 	and.w	r3, r3, #7
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	08da      	lsrs	r2, r3, #3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3208      	adds	r2, #8
 8000ae0:	6939      	ldr	r1, [r7, #16]
 8000ae2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	2203      	movs	r2, #3
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	43db      	mvns	r3, r3
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	4013      	ands	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f003 0203 	and.w	r2, r3, #3
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f000 809a 	beq.w	8000c5c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b28:	4b55      	ldr	r3, [pc, #340]	; (8000c80 <HAL_GPIO_Init+0x2cc>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	4a54      	ldr	r2, [pc, #336]	; (8000c80 <HAL_GPIO_Init+0x2cc>)
 8000b2e:	f043 0301 	orr.w	r3, r3, #1
 8000b32:	6193      	str	r3, [r2, #24]
 8000b34:	4b52      	ldr	r3, [pc, #328]	; (8000c80 <HAL_GPIO_Init+0x2cc>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b40:	4a50      	ldr	r2, [pc, #320]	; (8000c84 <HAL_GPIO_Init+0x2d0>)
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	089b      	lsrs	r3, r3, #2
 8000b46:	3302      	adds	r3, #2
 8000b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	f003 0303 	and.w	r3, r3, #3
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	220f      	movs	r2, #15
 8000b58:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	4013      	ands	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b6a:	d013      	beq.n	8000b94 <HAL_GPIO_Init+0x1e0>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a46      	ldr	r2, [pc, #280]	; (8000c88 <HAL_GPIO_Init+0x2d4>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d00d      	beq.n	8000b90 <HAL_GPIO_Init+0x1dc>
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4a45      	ldr	r2, [pc, #276]	; (8000c8c <HAL_GPIO_Init+0x2d8>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d007      	beq.n	8000b8c <HAL_GPIO_Init+0x1d8>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4a44      	ldr	r2, [pc, #272]	; (8000c90 <HAL_GPIO_Init+0x2dc>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d101      	bne.n	8000b88 <HAL_GPIO_Init+0x1d4>
 8000b84:	2303      	movs	r3, #3
 8000b86:	e006      	b.n	8000b96 <HAL_GPIO_Init+0x1e2>
 8000b88:	2305      	movs	r3, #5
 8000b8a:	e004      	b.n	8000b96 <HAL_GPIO_Init+0x1e2>
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	e002      	b.n	8000b96 <HAL_GPIO_Init+0x1e2>
 8000b90:	2301      	movs	r3, #1
 8000b92:	e000      	b.n	8000b96 <HAL_GPIO_Init+0x1e2>
 8000b94:	2300      	movs	r3, #0
 8000b96:	697a      	ldr	r2, [r7, #20]
 8000b98:	f002 0203 	and.w	r2, r2, #3
 8000b9c:	0092      	lsls	r2, r2, #2
 8000b9e:	4093      	lsls	r3, r2
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ba6:	4937      	ldr	r1, [pc, #220]	; (8000c84 <HAL_GPIO_Init+0x2d0>)
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	089b      	lsrs	r3, r3, #2
 8000bac:	3302      	adds	r3, #2
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bb4:	4b37      	ldr	r3, [pc, #220]	; (8000c94 <HAL_GPIO_Init+0x2e0>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d003      	beq.n	8000bd8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bd8:	4a2e      	ldr	r2, [pc, #184]	; (8000c94 <HAL_GPIO_Init+0x2e0>)
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000bde:	4b2d      	ldr	r3, [pc, #180]	; (8000c94 <HAL_GPIO_Init+0x2e0>)
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	43db      	mvns	r3, r3
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	4013      	ands	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d003      	beq.n	8000c02 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c02:	4a24      	ldr	r2, [pc, #144]	; (8000c94 <HAL_GPIO_Init+0x2e0>)
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c08:	4b22      	ldr	r3, [pc, #136]	; (8000c94 <HAL_GPIO_Init+0x2e0>)
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	43db      	mvns	r3, r3
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	4013      	ands	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d003      	beq.n	8000c2c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c2c:	4a19      	ldr	r2, [pc, #100]	; (8000c94 <HAL_GPIO_Init+0x2e0>)
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c32:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <HAL_GPIO_Init+0x2e0>)
 8000c34:	68db      	ldr	r3, [r3, #12]
 8000c36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d003      	beq.n	8000c56 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c56:	4a0f      	ldr	r2, [pc, #60]	; (8000c94 <HAL_GPIO_Init+0x2e0>)
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	fa22 f303 	lsr.w	r3, r2, r3
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	f47f aea9 	bne.w	80009c4 <HAL_GPIO_Init+0x10>
  }
}
 8000c72:	bf00      	nop
 8000c74:	bf00      	nop
 8000c76:	371c      	adds	r7, #28
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40010000 	.word	0x40010000
 8000c88:	48000400 	.word	0x48000400
 8000c8c:	48000800 	.word	0x48000800
 8000c90:	48000c00 	.word	0x48000c00
 8000c94:	40010400 	.word	0x40010400

08000c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	807b      	strh	r3, [r7, #2]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ca8:	787b      	ldrb	r3, [r7, #1]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d003      	beq.n	8000cb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cae:	887a      	ldrh	r2, [r7, #2]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cb4:	e002      	b.n	8000cbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cb6:	887a      	ldrh	r2, [r7, #2]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d102      	bne.n	8000ce2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	f000 bef4 	b.w	8001aca <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	f000 816a 	beq.w	8000fc6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cf2:	4bb3      	ldr	r3, [pc, #716]	; (8000fc0 <HAL_RCC_OscConfig+0x2f8>)
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f003 030c 	and.w	r3, r3, #12
 8000cfa:	2b04      	cmp	r3, #4
 8000cfc:	d00c      	beq.n	8000d18 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cfe:	4bb0      	ldr	r3, [pc, #704]	; (8000fc0 <HAL_RCC_OscConfig+0x2f8>)
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f003 030c 	and.w	r3, r3, #12
 8000d06:	2b08      	cmp	r3, #8
 8000d08:	d159      	bne.n	8000dbe <HAL_RCC_OscConfig+0xf6>
 8000d0a:	4bad      	ldr	r3, [pc, #692]	; (8000fc0 <HAL_RCC_OscConfig+0x2f8>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d16:	d152      	bne.n	8000dbe <HAL_RCC_OscConfig+0xf6>
 8000d18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d1c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d20:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000d24:	fa93 f3a3 	rbit	r3, r3
 8000d28:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d2c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d30:	fab3 f383 	clz	r3, r3
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	095b      	lsrs	r3, r3, #5
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	f043 0301 	orr.w	r3, r3, #1
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d102      	bne.n	8000d4a <HAL_RCC_OscConfig+0x82>
 8000d44:	4b9e      	ldr	r3, [pc, #632]	; (8000fc0 <HAL_RCC_OscConfig+0x2f8>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	e015      	b.n	8000d76 <HAL_RCC_OscConfig+0xae>
 8000d4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d4e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d52:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000d56:	fa93 f3a3 	rbit	r3, r3
 8000d5a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000d5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d62:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000d66:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000d6a:	fa93 f3a3 	rbit	r3, r3
 8000d6e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000d72:	4b93      	ldr	r3, [pc, #588]	; (8000fc0 <HAL_RCC_OscConfig+0x2f8>)
 8000d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d7a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000d7e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000d82:	fa92 f2a2 	rbit	r2, r2
 8000d86:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000d8a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000d8e:	fab2 f282 	clz	r2, r2
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	f042 0220 	orr.w	r2, r2, #32
 8000d98:	b2d2      	uxtb	r2, r2
 8000d9a:	f002 021f 	and.w	r2, r2, #31
 8000d9e:	2101      	movs	r1, #1
 8000da0:	fa01 f202 	lsl.w	r2, r1, r2
 8000da4:	4013      	ands	r3, r2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f000 810c 	beq.w	8000fc4 <HAL_RCC_OscConfig+0x2fc>
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 8106 	bne.w	8000fc4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	f000 be86 	b.w	8001aca <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dc8:	d106      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x110>
 8000dca:	4b7d      	ldr	r3, [pc, #500]	; (8000fc0 <HAL_RCC_OscConfig+0x2f8>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a7c      	ldr	r2, [pc, #496]	; (8000fc0 <HAL_RCC_OscConfig+0x2f8>)
 8000dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dd4:	6013      	str	r3, [r2, #0]
 8000dd6:	e030      	b.n	8000e3a <HAL_RCC_OscConfig+0x172>
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d10c      	bne.n	8000dfc <HAL_RCC_OscConfig+0x134>
 8000de2:	4b77      	ldr	r3, [pc, #476]	; (8000fc0 <HAL_RCC_OscConfig+0x2f8>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a76      	ldr	r2, [pc, #472]	; (8000fc0 <HAL_RCC_OscConfig+0x2f8>)
 8000de8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dec:	6013      	str	r3, [r2, #0]
 8000dee:	4b74      	ldr	r3, [pc, #464]	; (8000fc0 <HAL_RCC_OscConfig+0x2f8>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a73      	ldr	r2, [pc, #460]	; (8000fc0 <HAL_RCC_OscConfig+0x2f8>)
 8000df4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000df8:	6013      	str	r3, [r2, #0]
 8000dfa:	e01e      	b.n	8000e3a <HAL_RCC_OscConfig+0x172>
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e06:	d10c      	bne.n	8000e22 <HAL_RCC_OscConfig+0x15a>
 8000e08:	4b6d      	ldr	r3, [pc, #436]	; (8000fc0 <HAL_RCC_OscConfig+0x2f8>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a6c      	ldr	r2, [pc, #432]	; (8000fc0 <HAL_RCC_OscConfig+0x2f8>)
 8000e0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e12:	6013      	str	r3, [r2, #0]
 8000e14:	4b6a      	ldr	r3, [pc, #424]	; (8000fc0 <HAL_RCC_OscConfig+0x2f8>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a69      	ldr	r2, [pc, #420]	; (8000fc0 <HAL_RCC_OscConfig+0x2f8>)
 8000e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e1e:	6013      	str	r3, [r2, #0]
 8000e20:	e00b      	b.n	8000e3a <HAL_RCC_OscConfig+0x172>
 8000e22:	4b67      	ldr	r3, [pc, #412]	; (8000fc0 <HAL_RCC_OscConfig+0x2f8>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a66      	ldr	r2, [pc, #408]	; (8000fc0 <HAL_RCC_OscConfig+0x2f8>)
 8000e28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e2c:	6013      	str	r3, [r2, #0]
 8000e2e:	4b64      	ldr	r3, [pc, #400]	; (8000fc0 <HAL_RCC_OscConfig+0x2f8>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a63      	ldr	r2, [pc, #396]	; (8000fc0 <HAL_RCC_OscConfig+0x2f8>)
 8000e34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e38:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e3a:	4b61      	ldr	r3, [pc, #388]	; (8000fc0 <HAL_RCC_OscConfig+0x2f8>)
 8000e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e3e:	f023 020f 	bic.w	r2, r3, #15
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	495d      	ldr	r1, [pc, #372]	; (8000fc0 <HAL_RCC_OscConfig+0x2f8>)
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d059      	beq.n	8000f0c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e58:	f7ff fc96 	bl	8000788 <HAL_GetTick>
 8000e5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e60:	e00a      	b.n	8000e78 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e62:	f7ff fc91 	bl	8000788 <HAL_GetTick>
 8000e66:	4602      	mov	r2, r0
 8000e68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	2b64      	cmp	r3, #100	; 0x64
 8000e70:	d902      	bls.n	8000e78 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000e72:	2303      	movs	r3, #3
 8000e74:	f000 be29 	b.w	8001aca <HAL_RCC_OscConfig+0xe02>
 8000e78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e7c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e80:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000e84:	fa93 f3a3 	rbit	r3, r3
 8000e88:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000e8c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e90:	fab3 f383 	clz	r3, r3
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	095b      	lsrs	r3, r3, #5
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	f043 0301 	orr.w	r3, r3, #1
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d102      	bne.n	8000eaa <HAL_RCC_OscConfig+0x1e2>
 8000ea4:	4b46      	ldr	r3, [pc, #280]	; (8000fc0 <HAL_RCC_OscConfig+0x2f8>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	e015      	b.n	8000ed6 <HAL_RCC_OscConfig+0x20e>
 8000eaa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eae:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000eb6:	fa93 f3a3 	rbit	r3, r3
 8000eba:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000ebe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ec2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000ec6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000eca:	fa93 f3a3 	rbit	r3, r3
 8000ece:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000ed2:	4b3b      	ldr	r3, [pc, #236]	; (8000fc0 <HAL_RCC_OscConfig+0x2f8>)
 8000ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000eda:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000ede:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000ee2:	fa92 f2a2 	rbit	r2, r2
 8000ee6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000eea:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000eee:	fab2 f282 	clz	r2, r2
 8000ef2:	b2d2      	uxtb	r2, r2
 8000ef4:	f042 0220 	orr.w	r2, r2, #32
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	f002 021f 	and.w	r2, r2, #31
 8000efe:	2101      	movs	r1, #1
 8000f00:	fa01 f202 	lsl.w	r2, r1, r2
 8000f04:	4013      	ands	r3, r2
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d0ab      	beq.n	8000e62 <HAL_RCC_OscConfig+0x19a>
 8000f0a:	e05c      	b.n	8000fc6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f0c:	f7ff fc3c 	bl	8000788 <HAL_GetTick>
 8000f10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f14:	e00a      	b.n	8000f2c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f16:	f7ff fc37 	bl	8000788 <HAL_GetTick>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b64      	cmp	r3, #100	; 0x64
 8000f24:	d902      	bls.n	8000f2c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	f000 bdcf 	b.w	8001aca <HAL_RCC_OscConfig+0xe02>
 8000f2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f30:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f34:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000f38:	fa93 f3a3 	rbit	r3, r3
 8000f3c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000f40:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f44:	fab3 f383 	clz	r3, r3
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	095b      	lsrs	r3, r3, #5
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d102      	bne.n	8000f5e <HAL_RCC_OscConfig+0x296>
 8000f58:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <HAL_RCC_OscConfig+0x2f8>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	e015      	b.n	8000f8a <HAL_RCC_OscConfig+0x2c2>
 8000f5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f62:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f66:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000f6a:	fa93 f3a3 	rbit	r3, r3
 8000f6e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000f72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f76:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000f7a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000f7e:	fa93 f3a3 	rbit	r3, r3
 8000f82:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <HAL_RCC_OscConfig+0x2f8>)
 8000f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f8e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000f92:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000f96:	fa92 f2a2 	rbit	r2, r2
 8000f9a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000f9e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000fa2:	fab2 f282 	clz	r2, r2
 8000fa6:	b2d2      	uxtb	r2, r2
 8000fa8:	f042 0220 	orr.w	r2, r2, #32
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	f002 021f 	and.w	r2, r2, #31
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb8:	4013      	ands	r3, r2
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d1ab      	bne.n	8000f16 <HAL_RCC_OscConfig+0x24e>
 8000fbe:	e002      	b.n	8000fc6 <HAL_RCC_OscConfig+0x2fe>
 8000fc0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	f000 816f 	beq.w	80012b4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fd6:	4bd0      	ldr	r3, [pc, #832]	; (8001318 <HAL_RCC_OscConfig+0x650>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f003 030c 	and.w	r3, r3, #12
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d00b      	beq.n	8000ffa <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fe2:	4bcd      	ldr	r3, [pc, #820]	; (8001318 <HAL_RCC_OscConfig+0x650>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 030c 	and.w	r3, r3, #12
 8000fea:	2b08      	cmp	r3, #8
 8000fec:	d16c      	bne.n	80010c8 <HAL_RCC_OscConfig+0x400>
 8000fee:	4bca      	ldr	r3, [pc, #808]	; (8001318 <HAL_RCC_OscConfig+0x650>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d166      	bne.n	80010c8 <HAL_RCC_OscConfig+0x400>
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001000:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001004:	fa93 f3a3 	rbit	r3, r3
 8001008:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800100c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001010:	fab3 f383 	clz	r3, r3
 8001014:	b2db      	uxtb	r3, r3
 8001016:	095b      	lsrs	r3, r3, #5
 8001018:	b2db      	uxtb	r3, r3
 800101a:	f043 0301 	orr.w	r3, r3, #1
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b01      	cmp	r3, #1
 8001022:	d102      	bne.n	800102a <HAL_RCC_OscConfig+0x362>
 8001024:	4bbc      	ldr	r3, [pc, #752]	; (8001318 <HAL_RCC_OscConfig+0x650>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	e013      	b.n	8001052 <HAL_RCC_OscConfig+0x38a>
 800102a:	2302      	movs	r3, #2
 800102c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001030:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001034:	fa93 f3a3 	rbit	r3, r3
 8001038:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800103c:	2302      	movs	r3, #2
 800103e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001042:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001046:	fa93 f3a3 	rbit	r3, r3
 800104a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800104e:	4bb2      	ldr	r3, [pc, #712]	; (8001318 <HAL_RCC_OscConfig+0x650>)
 8001050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001052:	2202      	movs	r2, #2
 8001054:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001058:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800105c:	fa92 f2a2 	rbit	r2, r2
 8001060:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001064:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001068:	fab2 f282 	clz	r2, r2
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	f042 0220 	orr.w	r2, r2, #32
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	f002 021f 	and.w	r2, r2, #31
 8001078:	2101      	movs	r1, #1
 800107a:	fa01 f202 	lsl.w	r2, r1, r2
 800107e:	4013      	ands	r3, r2
 8001080:	2b00      	cmp	r3, #0
 8001082:	d007      	beq.n	8001094 <HAL_RCC_OscConfig+0x3cc>
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	691b      	ldr	r3, [r3, #16]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d002      	beq.n	8001094 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	f000 bd1b 	b.w	8001aca <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001094:	4ba0      	ldr	r3, [pc, #640]	; (8001318 <HAL_RCC_OscConfig+0x650>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	21f8      	movs	r1, #248	; 0xf8
 80010a4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80010ac:	fa91 f1a1 	rbit	r1, r1
 80010b0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80010b4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80010b8:	fab1 f181 	clz	r1, r1
 80010bc:	b2c9      	uxtb	r1, r1
 80010be:	408b      	lsls	r3, r1
 80010c0:	4995      	ldr	r1, [pc, #596]	; (8001318 <HAL_RCC_OscConfig+0x650>)
 80010c2:	4313      	orrs	r3, r2
 80010c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010c6:	e0f5      	b.n	80012b4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f000 8085 	beq.w	80011de <HAL_RCC_OscConfig+0x516>
 80010d4:	2301      	movs	r3, #1
 80010d6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010da:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80010de:	fa93 f3a3 	rbit	r3, r3
 80010e2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80010e6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010ea:	fab3 f383 	clz	r3, r3
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	461a      	mov	r2, r3
 80010fc:	2301      	movs	r3, #1
 80010fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001100:	f7ff fb42 	bl	8000788 <HAL_GetTick>
 8001104:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001108:	e00a      	b.n	8001120 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800110a:	f7ff fb3d 	bl	8000788 <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b02      	cmp	r3, #2
 8001118:	d902      	bls.n	8001120 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	f000 bcd5 	b.w	8001aca <HAL_RCC_OscConfig+0xe02>
 8001120:	2302      	movs	r3, #2
 8001122:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001126:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800112a:	fa93 f3a3 	rbit	r3, r3
 800112e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001132:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001136:	fab3 f383 	clz	r3, r3
 800113a:	b2db      	uxtb	r3, r3
 800113c:	095b      	lsrs	r3, r3, #5
 800113e:	b2db      	uxtb	r3, r3
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b01      	cmp	r3, #1
 8001148:	d102      	bne.n	8001150 <HAL_RCC_OscConfig+0x488>
 800114a:	4b73      	ldr	r3, [pc, #460]	; (8001318 <HAL_RCC_OscConfig+0x650>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	e013      	b.n	8001178 <HAL_RCC_OscConfig+0x4b0>
 8001150:	2302      	movs	r3, #2
 8001152:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001156:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800115a:	fa93 f3a3 	rbit	r3, r3
 800115e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001162:	2302      	movs	r3, #2
 8001164:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001168:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800116c:	fa93 f3a3 	rbit	r3, r3
 8001170:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001174:	4b68      	ldr	r3, [pc, #416]	; (8001318 <HAL_RCC_OscConfig+0x650>)
 8001176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001178:	2202      	movs	r2, #2
 800117a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800117e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001182:	fa92 f2a2 	rbit	r2, r2
 8001186:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800118a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800118e:	fab2 f282 	clz	r2, r2
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	f042 0220 	orr.w	r2, r2, #32
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	f002 021f 	and.w	r2, r2, #31
 800119e:	2101      	movs	r1, #1
 80011a0:	fa01 f202 	lsl.w	r2, r1, r2
 80011a4:	4013      	ands	r3, r2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d0af      	beq.n	800110a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011aa:	4b5b      	ldr	r3, [pc, #364]	; (8001318 <HAL_RCC_OscConfig+0x650>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	695b      	ldr	r3, [r3, #20]
 80011b8:	21f8      	movs	r1, #248	; 0xf8
 80011ba:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011be:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80011c2:	fa91 f1a1 	rbit	r1, r1
 80011c6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80011ca:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80011ce:	fab1 f181 	clz	r1, r1
 80011d2:	b2c9      	uxtb	r1, r1
 80011d4:	408b      	lsls	r3, r1
 80011d6:	4950      	ldr	r1, [pc, #320]	; (8001318 <HAL_RCC_OscConfig+0x650>)
 80011d8:	4313      	orrs	r3, r2
 80011da:	600b      	str	r3, [r1, #0]
 80011dc:	e06a      	b.n	80012b4 <HAL_RCC_OscConfig+0x5ec>
 80011de:	2301      	movs	r3, #1
 80011e0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80011e8:	fa93 f3a3 	rbit	r3, r3
 80011ec:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80011f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011f4:	fab3 f383 	clz	r3, r3
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011fe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	461a      	mov	r2, r3
 8001206:	2300      	movs	r3, #0
 8001208:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800120a:	f7ff fabd 	bl	8000788 <HAL_GetTick>
 800120e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001212:	e00a      	b.n	800122a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001214:	f7ff fab8 	bl	8000788 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b02      	cmp	r3, #2
 8001222:	d902      	bls.n	800122a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	f000 bc50 	b.w	8001aca <HAL_RCC_OscConfig+0xe02>
 800122a:	2302      	movs	r3, #2
 800122c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001230:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001234:	fa93 f3a3 	rbit	r3, r3
 8001238:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800123c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001240:	fab3 f383 	clz	r3, r3
 8001244:	b2db      	uxtb	r3, r3
 8001246:	095b      	lsrs	r3, r3, #5
 8001248:	b2db      	uxtb	r3, r3
 800124a:	f043 0301 	orr.w	r3, r3, #1
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b01      	cmp	r3, #1
 8001252:	d102      	bne.n	800125a <HAL_RCC_OscConfig+0x592>
 8001254:	4b30      	ldr	r3, [pc, #192]	; (8001318 <HAL_RCC_OscConfig+0x650>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	e013      	b.n	8001282 <HAL_RCC_OscConfig+0x5ba>
 800125a:	2302      	movs	r3, #2
 800125c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001260:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001264:	fa93 f3a3 	rbit	r3, r3
 8001268:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800126c:	2302      	movs	r3, #2
 800126e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001272:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001276:	fa93 f3a3 	rbit	r3, r3
 800127a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800127e:	4b26      	ldr	r3, [pc, #152]	; (8001318 <HAL_RCC_OscConfig+0x650>)
 8001280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001282:	2202      	movs	r2, #2
 8001284:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001288:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800128c:	fa92 f2a2 	rbit	r2, r2
 8001290:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001294:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001298:	fab2 f282 	clz	r2, r2
 800129c:	b2d2      	uxtb	r2, r2
 800129e:	f042 0220 	orr.w	r2, r2, #32
 80012a2:	b2d2      	uxtb	r2, r2
 80012a4:	f002 021f 	and.w	r2, r2, #31
 80012a8:	2101      	movs	r1, #1
 80012aa:	fa01 f202 	lsl.w	r2, r1, r2
 80012ae:	4013      	ands	r3, r2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d1af      	bne.n	8001214 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0308 	and.w	r3, r3, #8
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f000 80da 	beq.w	8001478 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d069      	beq.n	80013a2 <HAL_RCC_OscConfig+0x6da>
 80012ce:	2301      	movs	r3, #1
 80012d0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80012d8:	fa93 f3a3 	rbit	r3, r3
 80012dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80012e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012e4:	fab3 f383 	clz	r3, r3
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	461a      	mov	r2, r3
 80012ec:	4b0b      	ldr	r3, [pc, #44]	; (800131c <HAL_RCC_OscConfig+0x654>)
 80012ee:	4413      	add	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	461a      	mov	r2, r3
 80012f4:	2301      	movs	r3, #1
 80012f6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f8:	f7ff fa46 	bl	8000788 <HAL_GetTick>
 80012fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001300:	e00e      	b.n	8001320 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001302:	f7ff fa41 	bl	8000788 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d906      	bls.n	8001320 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e3d9      	b.n	8001aca <HAL_RCC_OscConfig+0xe02>
 8001316:	bf00      	nop
 8001318:	40021000 	.word	0x40021000
 800131c:	10908120 	.word	0x10908120
 8001320:	2302      	movs	r3, #2
 8001322:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001326:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800132a:	fa93 f3a3 	rbit	r3, r3
 800132e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001332:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001336:	2202      	movs	r2, #2
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	fa93 f2a3 	rbit	r2, r3
 8001344:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800134e:	2202      	movs	r2, #2
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	fa93 f2a3 	rbit	r2, r3
 800135c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001360:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001362:	4ba5      	ldr	r3, [pc, #660]	; (80015f8 <HAL_RCC_OscConfig+0x930>)
 8001364:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001366:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800136a:	2102      	movs	r1, #2
 800136c:	6019      	str	r1, [r3, #0]
 800136e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	fa93 f1a3 	rbit	r1, r3
 8001378:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800137c:	6019      	str	r1, [r3, #0]
  return result;
 800137e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	fab3 f383 	clz	r3, r3
 8001388:	b2db      	uxtb	r3, r3
 800138a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800138e:	b2db      	uxtb	r3, r3
 8001390:	f003 031f 	and.w	r3, r3, #31
 8001394:	2101      	movs	r1, #1
 8001396:	fa01 f303 	lsl.w	r3, r1, r3
 800139a:	4013      	ands	r3, r2
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0b0      	beq.n	8001302 <HAL_RCC_OscConfig+0x63a>
 80013a0:	e06a      	b.n	8001478 <HAL_RCC_OscConfig+0x7b0>
 80013a2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80013a6:	2201      	movs	r2, #1
 80013a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013aa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	fa93 f2a3 	rbit	r2, r3
 80013b4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80013b8:	601a      	str	r2, [r3, #0]
  return result;
 80013ba:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80013be:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013c0:	fab3 f383 	clz	r3, r3
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	461a      	mov	r2, r3
 80013c8:	4b8c      	ldr	r3, [pc, #560]	; (80015fc <HAL_RCC_OscConfig+0x934>)
 80013ca:	4413      	add	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	461a      	mov	r2, r3
 80013d0:	2300      	movs	r3, #0
 80013d2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d4:	f7ff f9d8 	bl	8000788 <HAL_GetTick>
 80013d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013dc:	e009      	b.n	80013f2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013de:	f7ff f9d3 	bl	8000788 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e36b      	b.n	8001aca <HAL_RCC_OscConfig+0xe02>
 80013f2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80013f6:	2202      	movs	r2, #2
 80013f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	fa93 f2a3 	rbit	r2, r3
 8001404:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800140e:	2202      	movs	r2, #2
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	fa93 f2a3 	rbit	r2, r3
 800141c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001426:	2202      	movs	r2, #2
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	fa93 f2a3 	rbit	r2, r3
 8001434:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001438:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800143a:	4b6f      	ldr	r3, [pc, #444]	; (80015f8 <HAL_RCC_OscConfig+0x930>)
 800143c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800143e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001442:	2102      	movs	r1, #2
 8001444:	6019      	str	r1, [r3, #0]
 8001446:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	fa93 f1a3 	rbit	r1, r3
 8001450:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001454:	6019      	str	r1, [r3, #0]
  return result;
 8001456:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	fab3 f383 	clz	r3, r3
 8001460:	b2db      	uxtb	r3, r3
 8001462:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001466:	b2db      	uxtb	r3, r3
 8001468:	f003 031f 	and.w	r3, r3, #31
 800146c:	2101      	movs	r1, #1
 800146e:	fa01 f303 	lsl.w	r3, r1, r3
 8001472:	4013      	ands	r3, r2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1b2      	bne.n	80013de <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	2b00      	cmp	r3, #0
 8001484:	f000 8158 	beq.w	8001738 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001488:	2300      	movs	r3, #0
 800148a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800148e:	4b5a      	ldr	r3, [pc, #360]	; (80015f8 <HAL_RCC_OscConfig+0x930>)
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d112      	bne.n	80014c0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800149a:	4b57      	ldr	r3, [pc, #348]	; (80015f8 <HAL_RCC_OscConfig+0x930>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	4a56      	ldr	r2, [pc, #344]	; (80015f8 <HAL_RCC_OscConfig+0x930>)
 80014a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a4:	61d3      	str	r3, [r2, #28]
 80014a6:	4b54      	ldr	r3, [pc, #336]	; (80015f8 <HAL_RCC_OscConfig+0x930>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80014ae:	f107 0308 	add.w	r3, r7, #8
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	f107 0308 	add.w	r3, r7, #8
 80014b8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80014ba:	2301      	movs	r3, #1
 80014bc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c0:	4b4f      	ldr	r3, [pc, #316]	; (8001600 <HAL_RCC_OscConfig+0x938>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d11a      	bne.n	8001502 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014cc:	4b4c      	ldr	r3, [pc, #304]	; (8001600 <HAL_RCC_OscConfig+0x938>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a4b      	ldr	r2, [pc, #300]	; (8001600 <HAL_RCC_OscConfig+0x938>)
 80014d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014d8:	f7ff f956 	bl	8000788 <HAL_GetTick>
 80014dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e0:	e009      	b.n	80014f6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014e2:	f7ff f951 	bl	8000788 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b64      	cmp	r3, #100	; 0x64
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e2e9      	b.n	8001aca <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f6:	4b42      	ldr	r3, [pc, #264]	; (8001600 <HAL_RCC_OscConfig+0x938>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d0ef      	beq.n	80014e2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d106      	bne.n	800151a <HAL_RCC_OscConfig+0x852>
 800150c:	4b3a      	ldr	r3, [pc, #232]	; (80015f8 <HAL_RCC_OscConfig+0x930>)
 800150e:	6a1b      	ldr	r3, [r3, #32]
 8001510:	4a39      	ldr	r2, [pc, #228]	; (80015f8 <HAL_RCC_OscConfig+0x930>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6213      	str	r3, [r2, #32]
 8001518:	e02f      	b.n	800157a <HAL_RCC_OscConfig+0x8b2>
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d10c      	bne.n	800153e <HAL_RCC_OscConfig+0x876>
 8001524:	4b34      	ldr	r3, [pc, #208]	; (80015f8 <HAL_RCC_OscConfig+0x930>)
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	4a33      	ldr	r2, [pc, #204]	; (80015f8 <HAL_RCC_OscConfig+0x930>)
 800152a:	f023 0301 	bic.w	r3, r3, #1
 800152e:	6213      	str	r3, [r2, #32]
 8001530:	4b31      	ldr	r3, [pc, #196]	; (80015f8 <HAL_RCC_OscConfig+0x930>)
 8001532:	6a1b      	ldr	r3, [r3, #32]
 8001534:	4a30      	ldr	r2, [pc, #192]	; (80015f8 <HAL_RCC_OscConfig+0x930>)
 8001536:	f023 0304 	bic.w	r3, r3, #4
 800153a:	6213      	str	r3, [r2, #32]
 800153c:	e01d      	b.n	800157a <HAL_RCC_OscConfig+0x8b2>
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	2b05      	cmp	r3, #5
 8001546:	d10c      	bne.n	8001562 <HAL_RCC_OscConfig+0x89a>
 8001548:	4b2b      	ldr	r3, [pc, #172]	; (80015f8 <HAL_RCC_OscConfig+0x930>)
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	4a2a      	ldr	r2, [pc, #168]	; (80015f8 <HAL_RCC_OscConfig+0x930>)
 800154e:	f043 0304 	orr.w	r3, r3, #4
 8001552:	6213      	str	r3, [r2, #32]
 8001554:	4b28      	ldr	r3, [pc, #160]	; (80015f8 <HAL_RCC_OscConfig+0x930>)
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	4a27      	ldr	r2, [pc, #156]	; (80015f8 <HAL_RCC_OscConfig+0x930>)
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	6213      	str	r3, [r2, #32]
 8001560:	e00b      	b.n	800157a <HAL_RCC_OscConfig+0x8b2>
 8001562:	4b25      	ldr	r3, [pc, #148]	; (80015f8 <HAL_RCC_OscConfig+0x930>)
 8001564:	6a1b      	ldr	r3, [r3, #32]
 8001566:	4a24      	ldr	r2, [pc, #144]	; (80015f8 <HAL_RCC_OscConfig+0x930>)
 8001568:	f023 0301 	bic.w	r3, r3, #1
 800156c:	6213      	str	r3, [r2, #32]
 800156e:	4b22      	ldr	r3, [pc, #136]	; (80015f8 <HAL_RCC_OscConfig+0x930>)
 8001570:	6a1b      	ldr	r3, [r3, #32]
 8001572:	4a21      	ldr	r2, [pc, #132]	; (80015f8 <HAL_RCC_OscConfig+0x930>)
 8001574:	f023 0304 	bic.w	r3, r3, #4
 8001578:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d06b      	beq.n	800165c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001584:	f7ff f900 	bl	8000788 <HAL_GetTick>
 8001588:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800158c:	e00b      	b.n	80015a6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800158e:	f7ff f8fb 	bl	8000788 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	f241 3288 	movw	r2, #5000	; 0x1388
 800159e:	4293      	cmp	r3, r2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e291      	b.n	8001aca <HAL_RCC_OscConfig+0xe02>
 80015a6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80015aa:	2202      	movs	r2, #2
 80015ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ae:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	fa93 f2a3 	rbit	r2, r3
 80015b8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80015c2:	2202      	movs	r2, #2
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	fa93 f2a3 	rbit	r2, r3
 80015d0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80015d4:	601a      	str	r2, [r3, #0]
  return result;
 80015d6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80015da:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015dc:	fab3 f383 	clz	r3, r3
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	095b      	lsrs	r3, r3, #5
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	f043 0302 	orr.w	r3, r3, #2
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d109      	bne.n	8001604 <HAL_RCC_OscConfig+0x93c>
 80015f0:	4b01      	ldr	r3, [pc, #4]	; (80015f8 <HAL_RCC_OscConfig+0x930>)
 80015f2:	6a1b      	ldr	r3, [r3, #32]
 80015f4:	e014      	b.n	8001620 <HAL_RCC_OscConfig+0x958>
 80015f6:	bf00      	nop
 80015f8:	40021000 	.word	0x40021000
 80015fc:	10908120 	.word	0x10908120
 8001600:	40007000 	.word	0x40007000
 8001604:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001608:	2202      	movs	r2, #2
 800160a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	fa93 f2a3 	rbit	r2, r3
 8001616:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	4bbb      	ldr	r3, [pc, #748]	; (800190c <HAL_RCC_OscConfig+0xc44>)
 800161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001620:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001624:	2102      	movs	r1, #2
 8001626:	6011      	str	r1, [r2, #0]
 8001628:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800162c:	6812      	ldr	r2, [r2, #0]
 800162e:	fa92 f1a2 	rbit	r1, r2
 8001632:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001636:	6011      	str	r1, [r2, #0]
  return result;
 8001638:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800163c:	6812      	ldr	r2, [r2, #0]
 800163e:	fab2 f282 	clz	r2, r2
 8001642:	b2d2      	uxtb	r2, r2
 8001644:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	f002 021f 	and.w	r2, r2, #31
 800164e:	2101      	movs	r1, #1
 8001650:	fa01 f202 	lsl.w	r2, r1, r2
 8001654:	4013      	ands	r3, r2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d099      	beq.n	800158e <HAL_RCC_OscConfig+0x8c6>
 800165a:	e063      	b.n	8001724 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165c:	f7ff f894 	bl	8000788 <HAL_GetTick>
 8001660:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001664:	e00b      	b.n	800167e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001666:	f7ff f88f 	bl	8000788 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	f241 3288 	movw	r2, #5000	; 0x1388
 8001676:	4293      	cmp	r3, r2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e225      	b.n	8001aca <HAL_RCC_OscConfig+0xe02>
 800167e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001682:	2202      	movs	r2, #2
 8001684:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001686:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	fa93 f2a3 	rbit	r2, r3
 8001690:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800169a:	2202      	movs	r2, #2
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	fa93 f2a3 	rbit	r2, r3
 80016a8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80016ac:	601a      	str	r2, [r3, #0]
  return result;
 80016ae:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80016b2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b4:	fab3 f383 	clz	r3, r3
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	095b      	lsrs	r3, r3, #5
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	f043 0302 	orr.w	r3, r3, #2
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d102      	bne.n	80016ce <HAL_RCC_OscConfig+0xa06>
 80016c8:	4b90      	ldr	r3, [pc, #576]	; (800190c <HAL_RCC_OscConfig+0xc44>)
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	e00d      	b.n	80016ea <HAL_RCC_OscConfig+0xa22>
 80016ce:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80016d2:	2202      	movs	r2, #2
 80016d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	fa93 f2a3 	rbit	r2, r3
 80016e0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	4b89      	ldr	r3, [pc, #548]	; (800190c <HAL_RCC_OscConfig+0xc44>)
 80016e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ea:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80016ee:	2102      	movs	r1, #2
 80016f0:	6011      	str	r1, [r2, #0]
 80016f2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80016f6:	6812      	ldr	r2, [r2, #0]
 80016f8:	fa92 f1a2 	rbit	r1, r2
 80016fc:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001700:	6011      	str	r1, [r2, #0]
  return result;
 8001702:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001706:	6812      	ldr	r2, [r2, #0]
 8001708:	fab2 f282 	clz	r2, r2
 800170c:	b2d2      	uxtb	r2, r2
 800170e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	f002 021f 	and.w	r2, r2, #31
 8001718:	2101      	movs	r1, #1
 800171a:	fa01 f202 	lsl.w	r2, r1, r2
 800171e:	4013      	ands	r3, r2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1a0      	bne.n	8001666 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001724:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001728:	2b01      	cmp	r3, #1
 800172a:	d105      	bne.n	8001738 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800172c:	4b77      	ldr	r3, [pc, #476]	; (800190c <HAL_RCC_OscConfig+0xc44>)
 800172e:	69db      	ldr	r3, [r3, #28]
 8001730:	4a76      	ldr	r2, [pc, #472]	; (800190c <HAL_RCC_OscConfig+0xc44>)
 8001732:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001736:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	2b00      	cmp	r3, #0
 8001740:	f000 81c2 	beq.w	8001ac8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001744:	4b71      	ldr	r3, [pc, #452]	; (800190c <HAL_RCC_OscConfig+0xc44>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 030c 	and.w	r3, r3, #12
 800174c:	2b08      	cmp	r3, #8
 800174e:	f000 819c 	beq.w	8001a8a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001752:	1d3b      	adds	r3, r7, #4
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	2b02      	cmp	r3, #2
 800175a:	f040 8114 	bne.w	8001986 <HAL_RCC_OscConfig+0xcbe>
 800175e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001762:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001766:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001768:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	fa93 f2a3 	rbit	r2, r3
 8001772:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001776:	601a      	str	r2, [r3, #0]
  return result;
 8001778:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800177c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800177e:	fab3 f383 	clz	r3, r3
 8001782:	b2db      	uxtb	r3, r3
 8001784:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001788:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	461a      	mov	r2, r3
 8001790:	2300      	movs	r3, #0
 8001792:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001794:	f7fe fff8 	bl	8000788 <HAL_GetTick>
 8001798:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800179c:	e009      	b.n	80017b2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800179e:	f7fe fff3 	bl	8000788 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e18b      	b.n	8001aca <HAL_RCC_OscConfig+0xe02>
 80017b2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80017b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017bc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	fa93 f2a3 	rbit	r2, r3
 80017c6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80017ca:	601a      	str	r2, [r3, #0]
  return result;
 80017cc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80017d0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017d2:	fab3 f383 	clz	r3, r3
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	095b      	lsrs	r3, r3, #5
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d102      	bne.n	80017ec <HAL_RCC_OscConfig+0xb24>
 80017e6:	4b49      	ldr	r3, [pc, #292]	; (800190c <HAL_RCC_OscConfig+0xc44>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	e01b      	b.n	8001824 <HAL_RCC_OscConfig+0xb5c>
 80017ec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	fa93 f2a3 	rbit	r2, r3
 8001800:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800180a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	fa93 f2a3 	rbit	r2, r3
 800181a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	4b3a      	ldr	r3, [pc, #232]	; (800190c <HAL_RCC_OscConfig+0xc44>)
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001828:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800182c:	6011      	str	r1, [r2, #0]
 800182e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001832:	6812      	ldr	r2, [r2, #0]
 8001834:	fa92 f1a2 	rbit	r1, r2
 8001838:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800183c:	6011      	str	r1, [r2, #0]
  return result;
 800183e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001842:	6812      	ldr	r2, [r2, #0]
 8001844:	fab2 f282 	clz	r2, r2
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	f042 0220 	orr.w	r2, r2, #32
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	f002 021f 	and.w	r2, r2, #31
 8001854:	2101      	movs	r1, #1
 8001856:	fa01 f202 	lsl.w	r2, r1, r2
 800185a:	4013      	ands	r3, r2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d19e      	bne.n	800179e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001860:	4b2a      	ldr	r3, [pc, #168]	; (800190c <HAL_RCC_OscConfig+0xc44>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800186e:	1d3b      	adds	r3, r7, #4
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	430b      	orrs	r3, r1
 8001876:	4925      	ldr	r1, [pc, #148]	; (800190c <HAL_RCC_OscConfig+0xc44>)
 8001878:	4313      	orrs	r3, r2
 800187a:	604b      	str	r3, [r1, #4]
 800187c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001880:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001884:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001886:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	fa93 f2a3 	rbit	r2, r3
 8001890:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001894:	601a      	str	r2, [r3, #0]
  return result;
 8001896:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800189a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800189c:	fab3 f383 	clz	r3, r3
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018a6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	461a      	mov	r2, r3
 80018ae:	2301      	movs	r3, #1
 80018b0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b2:	f7fe ff69 	bl	8000788 <HAL_GetTick>
 80018b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018ba:	e009      	b.n	80018d0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018bc:	f7fe ff64 	bl	8000788 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e0fc      	b.n	8001aca <HAL_RCC_OscConfig+0xe02>
 80018d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	fa93 f2a3 	rbit	r2, r3
 80018e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018e8:	601a      	str	r2, [r3, #0]
  return result;
 80018ea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018ee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018f0:	fab3 f383 	clz	r3, r3
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	095b      	lsrs	r3, r3, #5
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b01      	cmp	r3, #1
 8001902:	d105      	bne.n	8001910 <HAL_RCC_OscConfig+0xc48>
 8001904:	4b01      	ldr	r3, [pc, #4]	; (800190c <HAL_RCC_OscConfig+0xc44>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	e01e      	b.n	8001948 <HAL_RCC_OscConfig+0xc80>
 800190a:	bf00      	nop
 800190c:	40021000 	.word	0x40021000
 8001910:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001914:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001918:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	fa93 f2a3 	rbit	r2, r3
 8001924:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800192e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	fa93 f2a3 	rbit	r2, r3
 800193e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	4b63      	ldr	r3, [pc, #396]	; (8001ad4 <HAL_RCC_OscConfig+0xe0c>)
 8001946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001948:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800194c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001950:	6011      	str	r1, [r2, #0]
 8001952:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001956:	6812      	ldr	r2, [r2, #0]
 8001958:	fa92 f1a2 	rbit	r1, r2
 800195c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001960:	6011      	str	r1, [r2, #0]
  return result;
 8001962:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001966:	6812      	ldr	r2, [r2, #0]
 8001968:	fab2 f282 	clz	r2, r2
 800196c:	b2d2      	uxtb	r2, r2
 800196e:	f042 0220 	orr.w	r2, r2, #32
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	f002 021f 	and.w	r2, r2, #31
 8001978:	2101      	movs	r1, #1
 800197a:	fa01 f202 	lsl.w	r2, r1, r2
 800197e:	4013      	ands	r3, r2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d09b      	beq.n	80018bc <HAL_RCC_OscConfig+0xbf4>
 8001984:	e0a0      	b.n	8001ac8 <HAL_RCC_OscConfig+0xe00>
 8001986:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800198a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800198e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001990:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	fa93 f2a3 	rbit	r2, r3
 800199a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800199e:	601a      	str	r2, [r3, #0]
  return result;
 80019a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019a4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a6:	fab3 f383 	clz	r3, r3
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	461a      	mov	r2, r3
 80019b8:	2300      	movs	r3, #0
 80019ba:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019bc:	f7fe fee4 	bl	8000788 <HAL_GetTick>
 80019c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019c4:	e009      	b.n	80019da <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c6:	f7fe fedf 	bl	8000788 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e077      	b.n	8001aca <HAL_RCC_OscConfig+0xe02>
 80019da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	fa93 f2a3 	rbit	r2, r3
 80019ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f2:	601a      	str	r2, [r3, #0]
  return result;
 80019f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019fa:	fab3 f383 	clz	r3, r3
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	095b      	lsrs	r3, r3, #5
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d102      	bne.n	8001a14 <HAL_RCC_OscConfig+0xd4c>
 8001a0e:	4b31      	ldr	r3, [pc, #196]	; (8001ad4 <HAL_RCC_OscConfig+0xe0c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	e01b      	b.n	8001a4c <HAL_RCC_OscConfig+0xd84>
 8001a14:	f107 0320 	add.w	r3, r7, #32
 8001a18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1e:	f107 0320 	add.w	r3, r7, #32
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	fa93 f2a3 	rbit	r2, r3
 8001a28:	f107 031c 	add.w	r3, r7, #28
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	f107 0318 	add.w	r3, r7, #24
 8001a32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	f107 0318 	add.w	r3, r7, #24
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	fa93 f2a3 	rbit	r2, r3
 8001a42:	f107 0314 	add.w	r3, r7, #20
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	4b22      	ldr	r3, [pc, #136]	; (8001ad4 <HAL_RCC_OscConfig+0xe0c>)
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	f107 0210 	add.w	r2, r7, #16
 8001a50:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a54:	6011      	str	r1, [r2, #0]
 8001a56:	f107 0210 	add.w	r2, r7, #16
 8001a5a:	6812      	ldr	r2, [r2, #0]
 8001a5c:	fa92 f1a2 	rbit	r1, r2
 8001a60:	f107 020c 	add.w	r2, r7, #12
 8001a64:	6011      	str	r1, [r2, #0]
  return result;
 8001a66:	f107 020c 	add.w	r2, r7, #12
 8001a6a:	6812      	ldr	r2, [r2, #0]
 8001a6c:	fab2 f282 	clz	r2, r2
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	f042 0220 	orr.w	r2, r2, #32
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	f002 021f 	and.w	r2, r2, #31
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a82:	4013      	ands	r3, r2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d19e      	bne.n	80019c6 <HAL_RCC_OscConfig+0xcfe>
 8001a88:	e01e      	b.n	8001ac8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	69db      	ldr	r3, [r3, #28]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d101      	bne.n	8001a98 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e018      	b.n	8001aca <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a98:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <HAL_RCC_OscConfig+0xe0c>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001aa0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001aa4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d108      	bne.n	8001ac4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001ab2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ab6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d001      	beq.n	8001ac8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e000      	b.n	8001aca <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40021000 	.word	0x40021000

08001ad8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b09e      	sub	sp, #120	; 0x78
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e162      	b.n	8001db6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001af0:	4b90      	ldr	r3, [pc, #576]	; (8001d34 <HAL_RCC_ClockConfig+0x25c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d910      	bls.n	8001b20 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afe:	4b8d      	ldr	r3, [pc, #564]	; (8001d34 <HAL_RCC_ClockConfig+0x25c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f023 0207 	bic.w	r2, r3, #7
 8001b06:	498b      	ldr	r1, [pc, #556]	; (8001d34 <HAL_RCC_ClockConfig+0x25c>)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0e:	4b89      	ldr	r3, [pc, #548]	; (8001d34 <HAL_RCC_ClockConfig+0x25c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d001      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e14a      	b.n	8001db6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d008      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b2c:	4b82      	ldr	r3, [pc, #520]	; (8001d38 <HAL_RCC_ClockConfig+0x260>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	497f      	ldr	r1, [pc, #508]	; (8001d38 <HAL_RCC_ClockConfig+0x260>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 80dc 	beq.w	8001d04 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d13c      	bne.n	8001bce <HAL_RCC_ClockConfig+0xf6>
 8001b54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b58:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b5c:	fa93 f3a3 	rbit	r3, r3
 8001b60:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b64:	fab3 f383 	clz	r3, r3
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	095b      	lsrs	r3, r3, #5
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d102      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xa6>
 8001b78:	4b6f      	ldr	r3, [pc, #444]	; (8001d38 <HAL_RCC_ClockConfig+0x260>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	e00f      	b.n	8001b9e <HAL_RCC_ClockConfig+0xc6>
 8001b7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b82:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b86:	fa93 f3a3 	rbit	r3, r3
 8001b8a:	667b      	str	r3, [r7, #100]	; 0x64
 8001b8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b90:	663b      	str	r3, [r7, #96]	; 0x60
 8001b92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b94:	fa93 f3a3 	rbit	r3, r3
 8001b98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b9a:	4b67      	ldr	r3, [pc, #412]	; (8001d38 <HAL_RCC_ClockConfig+0x260>)
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ba2:	65ba      	str	r2, [r7, #88]	; 0x58
 8001ba4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ba6:	fa92 f2a2 	rbit	r2, r2
 8001baa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001bac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001bae:	fab2 f282 	clz	r2, r2
 8001bb2:	b2d2      	uxtb	r2, r2
 8001bb4:	f042 0220 	orr.w	r2, r2, #32
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	f002 021f 	and.w	r2, r2, #31
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d17b      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e0f3      	b.n	8001db6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d13c      	bne.n	8001c50 <HAL_RCC_ClockConfig+0x178>
 8001bd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bda:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bde:	fa93 f3a3 	rbit	r3, r3
 8001be2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001be6:	fab3 f383 	clz	r3, r3
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	095b      	lsrs	r3, r3, #5
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d102      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x128>
 8001bfa:	4b4f      	ldr	r3, [pc, #316]	; (8001d38 <HAL_RCC_ClockConfig+0x260>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	e00f      	b.n	8001c20 <HAL_RCC_ClockConfig+0x148>
 8001c00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c04:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c08:	fa93 f3a3 	rbit	r3, r3
 8001c0c:	647b      	str	r3, [r7, #68]	; 0x44
 8001c0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c12:	643b      	str	r3, [r7, #64]	; 0x40
 8001c14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c16:	fa93 f3a3 	rbit	r3, r3
 8001c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c1c:	4b46      	ldr	r3, [pc, #280]	; (8001d38 <HAL_RCC_ClockConfig+0x260>)
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c24:	63ba      	str	r2, [r7, #56]	; 0x38
 8001c26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c28:	fa92 f2a2 	rbit	r2, r2
 8001c2c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001c2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c30:	fab2 f282 	clz	r2, r2
 8001c34:	b2d2      	uxtb	r2, r2
 8001c36:	f042 0220 	orr.w	r2, r2, #32
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	f002 021f 	and.w	r2, r2, #31
 8001c40:	2101      	movs	r1, #1
 8001c42:	fa01 f202 	lsl.w	r2, r1, r2
 8001c46:	4013      	ands	r3, r2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d13a      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e0b2      	b.n	8001db6 <HAL_RCC_ClockConfig+0x2de>
 8001c50:	2302      	movs	r3, #2
 8001c52:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c56:	fa93 f3a3 	rbit	r3, r3
 8001c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c5e:	fab3 f383 	clz	r3, r3
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	095b      	lsrs	r3, r3, #5
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d102      	bne.n	8001c78 <HAL_RCC_ClockConfig+0x1a0>
 8001c72:	4b31      	ldr	r3, [pc, #196]	; (8001d38 <HAL_RCC_ClockConfig+0x260>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	e00d      	b.n	8001c94 <HAL_RCC_ClockConfig+0x1bc>
 8001c78:	2302      	movs	r3, #2
 8001c7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c7e:	fa93 f3a3 	rbit	r3, r3
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
 8001c84:	2302      	movs	r3, #2
 8001c86:	623b      	str	r3, [r7, #32]
 8001c88:	6a3b      	ldr	r3, [r7, #32]
 8001c8a:	fa93 f3a3 	rbit	r3, r3
 8001c8e:	61fb      	str	r3, [r7, #28]
 8001c90:	4b29      	ldr	r3, [pc, #164]	; (8001d38 <HAL_RCC_ClockConfig+0x260>)
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	2202      	movs	r2, #2
 8001c96:	61ba      	str	r2, [r7, #24]
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	fa92 f2a2 	rbit	r2, r2
 8001c9e:	617a      	str	r2, [r7, #20]
  return result;
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	fab2 f282 	clz	r2, r2
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	f042 0220 	orr.w	r2, r2, #32
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	f002 021f 	and.w	r2, r2, #31
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb8:	4013      	ands	r3, r2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e079      	b.n	8001db6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cc2:	4b1d      	ldr	r3, [pc, #116]	; (8001d38 <HAL_RCC_ClockConfig+0x260>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f023 0203 	bic.w	r2, r3, #3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	491a      	ldr	r1, [pc, #104]	; (8001d38 <HAL_RCC_ClockConfig+0x260>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cd4:	f7fe fd58 	bl	8000788 <HAL_GetTick>
 8001cd8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cda:	e00a      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cdc:	f7fe fd54 	bl	8000788 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e061      	b.n	8001db6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf2:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <HAL_RCC_ClockConfig+0x260>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f003 020c 	and.w	r2, r3, #12
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d1eb      	bne.n	8001cdc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d04:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <HAL_RCC_ClockConfig+0x25c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d214      	bcs.n	8001d3c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d12:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <HAL_RCC_ClockConfig+0x25c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 0207 	bic.w	r2, r3, #7
 8001d1a:	4906      	ldr	r1, [pc, #24]	; (8001d34 <HAL_RCC_ClockConfig+0x25c>)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d22:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <HAL_RCC_ClockConfig+0x25c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d005      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e040      	b.n	8001db6 <HAL_RCC_ClockConfig+0x2de>
 8001d34:	40022000 	.word	0x40022000
 8001d38:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d008      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d48:	4b1d      	ldr	r3, [pc, #116]	; (8001dc0 <HAL_RCC_ClockConfig+0x2e8>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	491a      	ldr	r1, [pc, #104]	; (8001dc0 <HAL_RCC_ClockConfig+0x2e8>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d009      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d66:	4b16      	ldr	r3, [pc, #88]	; (8001dc0 <HAL_RCC_ClockConfig+0x2e8>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	4912      	ldr	r1, [pc, #72]	; (8001dc0 <HAL_RCC_ClockConfig+0x2e8>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d7a:	f000 f829 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 8001d7e:	4601      	mov	r1, r0
 8001d80:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <HAL_RCC_ClockConfig+0x2e8>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d88:	22f0      	movs	r2, #240	; 0xf0
 8001d8a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	fa92 f2a2 	rbit	r2, r2
 8001d92:	60fa      	str	r2, [r7, #12]
  return result;
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	fab2 f282 	clz	r2, r2
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	40d3      	lsrs	r3, r2
 8001d9e:	4a09      	ldr	r2, [pc, #36]	; (8001dc4 <HAL_RCC_ClockConfig+0x2ec>)
 8001da0:	5cd3      	ldrb	r3, [r2, r3]
 8001da2:	fa21 f303 	lsr.w	r3, r1, r3
 8001da6:	4a08      	ldr	r2, [pc, #32]	; (8001dc8 <HAL_RCC_ClockConfig+0x2f0>)
 8001da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001daa:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <HAL_RCC_ClockConfig+0x2f4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7fe fca6 	bl	8000700 <HAL_InitTick>
  
  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3778      	adds	r7, #120	; 0x78
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	08003518 	.word	0x08003518
 8001dc8:	20000000 	.word	0x20000000
 8001dcc:	20000004 	.word	0x20000004

08001dd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b08b      	sub	sp, #44	; 0x2c
 8001dd4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61bb      	str	r3, [r7, #24]
 8001dde:	2300      	movs	r3, #0
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001dea:	4b29      	ldr	r3, [pc, #164]	; (8001e90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f003 030c 	and.w	r3, r3, #12
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	d002      	beq.n	8001e00 <HAL_RCC_GetSysClockFreq+0x30>
 8001dfa:	2b08      	cmp	r3, #8
 8001dfc:	d003      	beq.n	8001e06 <HAL_RCC_GetSysClockFreq+0x36>
 8001dfe:	e03c      	b.n	8001e7a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e00:	4b24      	ldr	r3, [pc, #144]	; (8001e94 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e02:	623b      	str	r3, [r7, #32]
      break;
 8001e04:	e03c      	b.n	8001e80 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001e0c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001e10:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	fa92 f2a2 	rbit	r2, r2
 8001e18:	607a      	str	r2, [r7, #4]
  return result;
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	fab2 f282 	clz	r2, r2
 8001e20:	b2d2      	uxtb	r2, r2
 8001e22:	40d3      	lsrs	r3, r2
 8001e24:	4a1c      	ldr	r2, [pc, #112]	; (8001e98 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e26:	5cd3      	ldrb	r3, [r2, r3]
 8001e28:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001e2a:	4b19      	ldr	r3, [pc, #100]	; (8001e90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2e:	f003 030f 	and.w	r3, r3, #15
 8001e32:	220f      	movs	r2, #15
 8001e34:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	fa92 f2a2 	rbit	r2, r2
 8001e3c:	60fa      	str	r2, [r7, #12]
  return result;
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	fab2 f282 	clz	r2, r2
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	40d3      	lsrs	r3, r2
 8001e48:	4a14      	ldr	r2, [pc, #80]	; (8001e9c <HAL_RCC_GetSysClockFreq+0xcc>)
 8001e4a:	5cd3      	ldrb	r3, [r2, r3]
 8001e4c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d008      	beq.n	8001e6a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e58:	4a0e      	ldr	r2, [pc, #56]	; (8001e94 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	fb02 f303 	mul.w	r3, r2, r3
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24
 8001e68:	e004      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	4a0c      	ldr	r2, [pc, #48]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e6e:	fb02 f303 	mul.w	r3, r2, r3
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	623b      	str	r3, [r7, #32]
      break;
 8001e78:	e002      	b.n	8001e80 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e7c:	623b      	str	r3, [r7, #32]
      break;
 8001e7e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e80:	6a3b      	ldr	r3, [r7, #32]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	372c      	adds	r7, #44	; 0x2c
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	40021000 	.word	0x40021000
 8001e94:	007a1200 	.word	0x007a1200
 8001e98:	08003530 	.word	0x08003530
 8001e9c:	08003540 	.word	0x08003540
 8001ea0:	003d0900 	.word	0x003d0900

08001ea4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ea8:	4b03      	ldr	r3, [pc, #12]	; (8001eb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	20000000 	.word	0x20000000

08001ebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001ec2:	f7ff ffef 	bl	8001ea4 <HAL_RCC_GetHCLKFreq>
 8001ec6:	4601      	mov	r1, r0
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ed0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001ed4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	fa92 f2a2 	rbit	r2, r2
 8001edc:	603a      	str	r2, [r7, #0]
  return result;
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	fab2 f282 	clz	r2, r2
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	40d3      	lsrs	r3, r2
 8001ee8:	4a04      	ldr	r2, [pc, #16]	; (8001efc <HAL_RCC_GetPCLK1Freq+0x40>)
 8001eea:	5cd3      	ldrb	r3, [r2, r3]
 8001eec:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	08003528 	.word	0x08003528

08001f00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001f06:	f7ff ffcd 	bl	8001ea4 <HAL_RCC_GetHCLKFreq>
 8001f0a:	4601      	mov	r1, r0
 8001f0c:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001f14:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001f18:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	fa92 f2a2 	rbit	r2, r2
 8001f20:	603a      	str	r2, [r7, #0]
  return result;
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	fab2 f282 	clz	r2, r2
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	40d3      	lsrs	r3, r2
 8001f2c:	4a04      	ldr	r2, [pc, #16]	; (8001f40 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001f2e:	5cd3      	ldrb	r3, [r2, r3]
 8001f30:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001f34:	4618      	mov	r0, r3
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	08003528 	.word	0x08003528

08001f44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e049      	b.n	8001fea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d106      	bne.n	8001f70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7fe fab6 	bl	80004dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2202      	movs	r2, #2
 8001f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3304      	adds	r3, #4
 8001f80:	4619      	mov	r1, r3
 8001f82:	4610      	mov	r0, r2
 8001f84:	f000 fb58 	bl	8002638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e049      	b.n	8002098 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2b00      	cmp	r3, #0
 800200e:	d106      	bne.n	800201e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 f841 	bl	80020a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2202      	movs	r2, #2
 8002022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	3304      	adds	r3, #4
 800202e:	4619      	mov	r1, r3
 8002030:	4610      	mov	r0, r2
 8002032:	f000 fb01 	bl	8002638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d109      	bne.n	80020d8 <HAL_TIM_PWM_Start+0x24>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	bf14      	ite	ne
 80020d0:	2301      	movne	r3, #1
 80020d2:	2300      	moveq	r3, #0
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	e03c      	b.n	8002152 <HAL_TIM_PWM_Start+0x9e>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d109      	bne.n	80020f2 <HAL_TIM_PWM_Start+0x3e>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	bf14      	ite	ne
 80020ea:	2301      	movne	r3, #1
 80020ec:	2300      	moveq	r3, #0
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	e02f      	b.n	8002152 <HAL_TIM_PWM_Start+0x9e>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d109      	bne.n	800210c <HAL_TIM_PWM_Start+0x58>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b01      	cmp	r3, #1
 8002102:	bf14      	ite	ne
 8002104:	2301      	movne	r3, #1
 8002106:	2300      	moveq	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	e022      	b.n	8002152 <HAL_TIM_PWM_Start+0x9e>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	2b0c      	cmp	r3, #12
 8002110:	d109      	bne.n	8002126 <HAL_TIM_PWM_Start+0x72>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b01      	cmp	r3, #1
 800211c:	bf14      	ite	ne
 800211e:	2301      	movne	r3, #1
 8002120:	2300      	moveq	r3, #0
 8002122:	b2db      	uxtb	r3, r3
 8002124:	e015      	b.n	8002152 <HAL_TIM_PWM_Start+0x9e>
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	2b10      	cmp	r3, #16
 800212a:	d109      	bne.n	8002140 <HAL_TIM_PWM_Start+0x8c>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b01      	cmp	r3, #1
 8002136:	bf14      	ite	ne
 8002138:	2301      	movne	r3, #1
 800213a:	2300      	moveq	r3, #0
 800213c:	b2db      	uxtb	r3, r3
 800213e:	e008      	b.n	8002152 <HAL_TIM_PWM_Start+0x9e>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b01      	cmp	r3, #1
 800214a:	bf14      	ite	ne
 800214c:	2301      	movne	r3, #1
 800214e:	2300      	moveq	r3, #0
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e088      	b.n	800226c <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d104      	bne.n	800216a <HAL_TIM_PWM_Start+0xb6>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2202      	movs	r2, #2
 8002164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002168:	e023      	b.n	80021b2 <HAL_TIM_PWM_Start+0xfe>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	2b04      	cmp	r3, #4
 800216e:	d104      	bne.n	800217a <HAL_TIM_PWM_Start+0xc6>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2202      	movs	r2, #2
 8002174:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002178:	e01b      	b.n	80021b2 <HAL_TIM_PWM_Start+0xfe>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	2b08      	cmp	r3, #8
 800217e:	d104      	bne.n	800218a <HAL_TIM_PWM_Start+0xd6>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2202      	movs	r2, #2
 8002184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002188:	e013      	b.n	80021b2 <HAL_TIM_PWM_Start+0xfe>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	2b0c      	cmp	r3, #12
 800218e:	d104      	bne.n	800219a <HAL_TIM_PWM_Start+0xe6>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2202      	movs	r2, #2
 8002194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002198:	e00b      	b.n	80021b2 <HAL_TIM_PWM_Start+0xfe>
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	2b10      	cmp	r3, #16
 800219e:	d104      	bne.n	80021aa <HAL_TIM_PWM_Start+0xf6>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2202      	movs	r2, #2
 80021a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021a8:	e003      	b.n	80021b2 <HAL_TIM_PWM_Start+0xfe>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2202      	movs	r2, #2
 80021ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2201      	movs	r2, #1
 80021b8:	6839      	ldr	r1, [r7, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 fdf4 	bl	8002da8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a2b      	ldr	r2, [pc, #172]	; (8002274 <HAL_TIM_PWM_Start+0x1c0>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d00e      	beq.n	80021e8 <HAL_TIM_PWM_Start+0x134>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a2a      	ldr	r2, [pc, #168]	; (8002278 <HAL_TIM_PWM_Start+0x1c4>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d009      	beq.n	80021e8 <HAL_TIM_PWM_Start+0x134>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a28      	ldr	r2, [pc, #160]	; (800227c <HAL_TIM_PWM_Start+0x1c8>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d004      	beq.n	80021e8 <HAL_TIM_PWM_Start+0x134>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a27      	ldr	r2, [pc, #156]	; (8002280 <HAL_TIM_PWM_Start+0x1cc>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d101      	bne.n	80021ec <HAL_TIM_PWM_Start+0x138>
 80021e8:	2301      	movs	r3, #1
 80021ea:	e000      	b.n	80021ee <HAL_TIM_PWM_Start+0x13a>
 80021ec:	2300      	movs	r3, #0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d007      	beq.n	8002202 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002200:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a1b      	ldr	r2, [pc, #108]	; (8002274 <HAL_TIM_PWM_Start+0x1c0>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d00e      	beq.n	800222a <HAL_TIM_PWM_Start+0x176>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002214:	d009      	beq.n	800222a <HAL_TIM_PWM_Start+0x176>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a1a      	ldr	r2, [pc, #104]	; (8002284 <HAL_TIM_PWM_Start+0x1d0>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d004      	beq.n	800222a <HAL_TIM_PWM_Start+0x176>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a14      	ldr	r2, [pc, #80]	; (8002278 <HAL_TIM_PWM_Start+0x1c4>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d115      	bne.n	8002256 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	4b15      	ldr	r3, [pc, #84]	; (8002288 <HAL_TIM_PWM_Start+0x1d4>)
 8002232:	4013      	ands	r3, r2
 8002234:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2b06      	cmp	r3, #6
 800223a:	d015      	beq.n	8002268 <HAL_TIM_PWM_Start+0x1b4>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002242:	d011      	beq.n	8002268 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0201 	orr.w	r2, r2, #1
 8002252:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002254:	e008      	b.n	8002268 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f042 0201 	orr.w	r2, r2, #1
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	e000      	b.n	800226a <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002268:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40012c00 	.word	0x40012c00
 8002278:	40014000 	.word	0x40014000
 800227c:	40014400 	.word	0x40014400
 8002280:	40014800 	.word	0x40014800
 8002284:	40000400 	.word	0x40000400
 8002288:	00010007 	.word	0x00010007

0800228c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d101      	bne.n	80022a6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80022a2:	2302      	movs	r3, #2
 80022a4:	e0fd      	b.n	80024a2 <HAL_TIM_PWM_ConfigChannel+0x216>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b14      	cmp	r3, #20
 80022b2:	f200 80f0 	bhi.w	8002496 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80022b6:	a201      	add	r2, pc, #4	; (adr r2, 80022bc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80022b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022bc:	08002311 	.word	0x08002311
 80022c0:	08002497 	.word	0x08002497
 80022c4:	08002497 	.word	0x08002497
 80022c8:	08002497 	.word	0x08002497
 80022cc:	08002351 	.word	0x08002351
 80022d0:	08002497 	.word	0x08002497
 80022d4:	08002497 	.word	0x08002497
 80022d8:	08002497 	.word	0x08002497
 80022dc:	08002393 	.word	0x08002393
 80022e0:	08002497 	.word	0x08002497
 80022e4:	08002497 	.word	0x08002497
 80022e8:	08002497 	.word	0x08002497
 80022ec:	080023d3 	.word	0x080023d3
 80022f0:	08002497 	.word	0x08002497
 80022f4:	08002497 	.word	0x08002497
 80022f8:	08002497 	.word	0x08002497
 80022fc:	08002415 	.word	0x08002415
 8002300:	08002497 	.word	0x08002497
 8002304:	08002497 	.word	0x08002497
 8002308:	08002497 	.word	0x08002497
 800230c:	08002455 	.word	0x08002455
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68b9      	ldr	r1, [r7, #8]
 8002316:	4618      	mov	r0, r3
 8002318:	f000 fa06 	bl	8002728 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	699a      	ldr	r2, [r3, #24]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f042 0208 	orr.w	r2, r2, #8
 800232a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	699a      	ldr	r2, [r3, #24]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0204 	bic.w	r2, r2, #4
 800233a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6999      	ldr	r1, [r3, #24]
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	691a      	ldr	r2, [r3, #16]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	619a      	str	r2, [r3, #24]
      break;
 800234e:	e0a3      	b.n	8002498 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68b9      	ldr	r1, [r7, #8]
 8002356:	4618      	mov	r0, r3
 8002358:	f000 fa6c 	bl	8002834 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	699a      	ldr	r2, [r3, #24]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800236a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	699a      	ldr	r2, [r3, #24]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800237a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6999      	ldr	r1, [r3, #24]
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	021a      	lsls	r2, r3, #8
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	619a      	str	r2, [r3, #24]
      break;
 8002390:	e082      	b.n	8002498 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68b9      	ldr	r1, [r7, #8]
 8002398:	4618      	mov	r0, r3
 800239a:	f000 facb 	bl	8002934 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	69da      	ldr	r2, [r3, #28]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f042 0208 	orr.w	r2, r2, #8
 80023ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	69da      	ldr	r2, [r3, #28]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 0204 	bic.w	r2, r2, #4
 80023bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	69d9      	ldr	r1, [r3, #28]
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	691a      	ldr	r2, [r3, #16]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	61da      	str	r2, [r3, #28]
      break;
 80023d0:	e062      	b.n	8002498 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68b9      	ldr	r1, [r7, #8]
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 fb29 	bl	8002a30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	69da      	ldr	r2, [r3, #28]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	69da      	ldr	r2, [r3, #28]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	69d9      	ldr	r1, [r3, #28]
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	021a      	lsls	r2, r3, #8
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	430a      	orrs	r2, r1
 8002410:	61da      	str	r2, [r3, #28]
      break;
 8002412:	e041      	b.n	8002498 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68b9      	ldr	r1, [r7, #8]
 800241a:	4618      	mov	r0, r3
 800241c:	f000 fb6c 	bl	8002af8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0208 	orr.w	r2, r2, #8
 800242e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0204 	bic.w	r2, r2, #4
 800243e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	691a      	ldr	r2, [r3, #16]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002452:	e021      	b.n	8002498 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68b9      	ldr	r1, [r7, #8]
 800245a:	4618      	mov	r0, r3
 800245c:	f000 fbaa 	bl	8002bb4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800246e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800247e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	021a      	lsls	r2, r3, #8
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	430a      	orrs	r2, r1
 8002492:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002494:	e000      	b.n	8002498 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8002496:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop

080024ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d101      	bne.n	80024c4 <HAL_TIM_ConfigClockSource+0x18>
 80024c0:	2302      	movs	r3, #2
 80024c2:	e0b5      	b.n	8002630 <HAL_TIM_ConfigClockSource+0x184>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2202      	movs	r2, #2
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002500:	d03e      	beq.n	8002580 <HAL_TIM_ConfigClockSource+0xd4>
 8002502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002506:	f200 8087 	bhi.w	8002618 <HAL_TIM_ConfigClockSource+0x16c>
 800250a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800250e:	f000 8085 	beq.w	800261c <HAL_TIM_ConfigClockSource+0x170>
 8002512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002516:	d87f      	bhi.n	8002618 <HAL_TIM_ConfigClockSource+0x16c>
 8002518:	2b70      	cmp	r3, #112	; 0x70
 800251a:	d01a      	beq.n	8002552 <HAL_TIM_ConfigClockSource+0xa6>
 800251c:	2b70      	cmp	r3, #112	; 0x70
 800251e:	d87b      	bhi.n	8002618 <HAL_TIM_ConfigClockSource+0x16c>
 8002520:	2b60      	cmp	r3, #96	; 0x60
 8002522:	d050      	beq.n	80025c6 <HAL_TIM_ConfigClockSource+0x11a>
 8002524:	2b60      	cmp	r3, #96	; 0x60
 8002526:	d877      	bhi.n	8002618 <HAL_TIM_ConfigClockSource+0x16c>
 8002528:	2b50      	cmp	r3, #80	; 0x50
 800252a:	d03c      	beq.n	80025a6 <HAL_TIM_ConfigClockSource+0xfa>
 800252c:	2b50      	cmp	r3, #80	; 0x50
 800252e:	d873      	bhi.n	8002618 <HAL_TIM_ConfigClockSource+0x16c>
 8002530:	2b40      	cmp	r3, #64	; 0x40
 8002532:	d058      	beq.n	80025e6 <HAL_TIM_ConfigClockSource+0x13a>
 8002534:	2b40      	cmp	r3, #64	; 0x40
 8002536:	d86f      	bhi.n	8002618 <HAL_TIM_ConfigClockSource+0x16c>
 8002538:	2b30      	cmp	r3, #48	; 0x30
 800253a:	d064      	beq.n	8002606 <HAL_TIM_ConfigClockSource+0x15a>
 800253c:	2b30      	cmp	r3, #48	; 0x30
 800253e:	d86b      	bhi.n	8002618 <HAL_TIM_ConfigClockSource+0x16c>
 8002540:	2b20      	cmp	r3, #32
 8002542:	d060      	beq.n	8002606 <HAL_TIM_ConfigClockSource+0x15a>
 8002544:	2b20      	cmp	r3, #32
 8002546:	d867      	bhi.n	8002618 <HAL_TIM_ConfigClockSource+0x16c>
 8002548:	2b00      	cmp	r3, #0
 800254a:	d05c      	beq.n	8002606 <HAL_TIM_ConfigClockSource+0x15a>
 800254c:	2b10      	cmp	r3, #16
 800254e:	d05a      	beq.n	8002606 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002550:	e062      	b.n	8002618 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6818      	ldr	r0, [r3, #0]
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	6899      	ldr	r1, [r3, #8]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	f000 fc01 	bl	8002d68 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002574:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	609a      	str	r2, [r3, #8]
      break;
 800257e:	e04e      	b.n	800261e <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6818      	ldr	r0, [r3, #0]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	6899      	ldr	r1, [r3, #8]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	f000 fbea 	bl	8002d68 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025a2:	609a      	str	r2, [r3, #8]
      break;
 80025a4:	e03b      	b.n	800261e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6818      	ldr	r0, [r3, #0]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	6859      	ldr	r1, [r3, #4]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	461a      	mov	r2, r3
 80025b4:	f000 fb5e 	bl	8002c74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2150      	movs	r1, #80	; 0x50
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 fbb7 	bl	8002d32 <TIM_ITRx_SetConfig>
      break;
 80025c4:	e02b      	b.n	800261e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6818      	ldr	r0, [r3, #0]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	6859      	ldr	r1, [r3, #4]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	461a      	mov	r2, r3
 80025d4:	f000 fb7d 	bl	8002cd2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2160      	movs	r1, #96	; 0x60
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 fba7 	bl	8002d32 <TIM_ITRx_SetConfig>
      break;
 80025e4:	e01b      	b.n	800261e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6818      	ldr	r0, [r3, #0]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	6859      	ldr	r1, [r3, #4]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	461a      	mov	r2, r3
 80025f4:	f000 fb3e 	bl	8002c74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2140      	movs	r1, #64	; 0x40
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 fb97 	bl	8002d32 <TIM_ITRx_SetConfig>
      break;
 8002604:	e00b      	b.n	800261e <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4619      	mov	r1, r3
 8002610:	4610      	mov	r0, r2
 8002612:	f000 fb8e 	bl	8002d32 <TIM_ITRx_SetConfig>
        break;
 8002616:	e002      	b.n	800261e <HAL_TIM_ConfigClockSource+0x172>
      break;
 8002618:	bf00      	nop
 800261a:	e000      	b.n	800261e <HAL_TIM_ConfigClockSource+0x172>
      break;
 800261c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a32      	ldr	r2, [pc, #200]	; (8002714 <TIM_Base_SetConfig+0xdc>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d007      	beq.n	8002660 <TIM_Base_SetConfig+0x28>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002656:	d003      	beq.n	8002660 <TIM_Base_SetConfig+0x28>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a2f      	ldr	r2, [pc, #188]	; (8002718 <TIM_Base_SetConfig+0xe0>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d108      	bne.n	8002672 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002666:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	4313      	orrs	r3, r2
 8002670:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a27      	ldr	r2, [pc, #156]	; (8002714 <TIM_Base_SetConfig+0xdc>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d013      	beq.n	80026a2 <TIM_Base_SetConfig+0x6a>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002680:	d00f      	beq.n	80026a2 <TIM_Base_SetConfig+0x6a>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a24      	ldr	r2, [pc, #144]	; (8002718 <TIM_Base_SetConfig+0xe0>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d00b      	beq.n	80026a2 <TIM_Base_SetConfig+0x6a>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a23      	ldr	r2, [pc, #140]	; (800271c <TIM_Base_SetConfig+0xe4>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d007      	beq.n	80026a2 <TIM_Base_SetConfig+0x6a>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a22      	ldr	r2, [pc, #136]	; (8002720 <TIM_Base_SetConfig+0xe8>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d003      	beq.n	80026a2 <TIM_Base_SetConfig+0x6a>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a21      	ldr	r2, [pc, #132]	; (8002724 <TIM_Base_SetConfig+0xec>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d108      	bne.n	80026b4 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	4313      	orrs	r3, r2
 80026c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a0e      	ldr	r2, [pc, #56]	; (8002714 <TIM_Base_SetConfig+0xdc>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d00b      	beq.n	80026f8 <TIM_Base_SetConfig+0xc0>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a0e      	ldr	r2, [pc, #56]	; (800271c <TIM_Base_SetConfig+0xe4>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d007      	beq.n	80026f8 <TIM_Base_SetConfig+0xc0>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a0d      	ldr	r2, [pc, #52]	; (8002720 <TIM_Base_SetConfig+0xe8>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d003      	beq.n	80026f8 <TIM_Base_SetConfig+0xc0>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a0c      	ldr	r2, [pc, #48]	; (8002724 <TIM_Base_SetConfig+0xec>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d103      	bne.n	8002700 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	691a      	ldr	r2, [r3, #16]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	615a      	str	r2, [r3, #20]
}
 8002706:	bf00      	nop
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	40012c00 	.word	0x40012c00
 8002718:	40000400 	.word	0x40000400
 800271c:	40014000 	.word	0x40014000
 8002720:	40014400 	.word	0x40014400
 8002724:	40014800 	.word	0x40014800

08002728 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002728:	b480      	push	{r7}
 800272a:	b087      	sub	sp, #28
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	f023 0201 	bic.w	r2, r3, #1
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800275a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f023 0303 	bic.w	r3, r3, #3
 8002762:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	4313      	orrs	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f023 0302 	bic.w	r3, r3, #2
 8002774:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	4313      	orrs	r3, r2
 800277e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a28      	ldr	r2, [pc, #160]	; (8002824 <TIM_OC1_SetConfig+0xfc>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d00b      	beq.n	80027a0 <TIM_OC1_SetConfig+0x78>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a27      	ldr	r2, [pc, #156]	; (8002828 <TIM_OC1_SetConfig+0x100>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d007      	beq.n	80027a0 <TIM_OC1_SetConfig+0x78>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a26      	ldr	r2, [pc, #152]	; (800282c <TIM_OC1_SetConfig+0x104>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d003      	beq.n	80027a0 <TIM_OC1_SetConfig+0x78>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a25      	ldr	r2, [pc, #148]	; (8002830 <TIM_OC1_SetConfig+0x108>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d10c      	bne.n	80027ba <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	f023 0308 	bic.w	r3, r3, #8
 80027a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f023 0304 	bic.w	r3, r3, #4
 80027b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a19      	ldr	r2, [pc, #100]	; (8002824 <TIM_OC1_SetConfig+0xfc>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d00b      	beq.n	80027da <TIM_OC1_SetConfig+0xb2>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a18      	ldr	r2, [pc, #96]	; (8002828 <TIM_OC1_SetConfig+0x100>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d007      	beq.n	80027da <TIM_OC1_SetConfig+0xb2>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a17      	ldr	r2, [pc, #92]	; (800282c <TIM_OC1_SetConfig+0x104>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d003      	beq.n	80027da <TIM_OC1_SetConfig+0xb2>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a16      	ldr	r2, [pc, #88]	; (8002830 <TIM_OC1_SetConfig+0x108>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d111      	bne.n	80027fe <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685a      	ldr	r2, [r3, #4]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	621a      	str	r2, [r3, #32]
}
 8002818:	bf00      	nop
 800281a:	371c      	adds	r7, #28
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	40012c00 	.word	0x40012c00
 8002828:	40014000 	.word	0x40014000
 800282c:	40014400 	.word	0x40014400
 8002830:	40014800 	.word	0x40014800

08002834 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002834:	b480      	push	{r7}
 8002836:	b087      	sub	sp, #28
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	f023 0210 	bic.w	r2, r3, #16
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002862:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800286e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	021b      	lsls	r3, r3, #8
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	4313      	orrs	r3, r2
 800287a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	f023 0320 	bic.w	r3, r3, #32
 8002882:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	011b      	lsls	r3, r3, #4
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	4313      	orrs	r3, r2
 800288e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a24      	ldr	r2, [pc, #144]	; (8002924 <TIM_OC2_SetConfig+0xf0>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d10d      	bne.n	80028b4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800289e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	011b      	lsls	r3, r3, #4
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a1b      	ldr	r2, [pc, #108]	; (8002924 <TIM_OC2_SetConfig+0xf0>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d00b      	beq.n	80028d4 <TIM_OC2_SetConfig+0xa0>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a1a      	ldr	r2, [pc, #104]	; (8002928 <TIM_OC2_SetConfig+0xf4>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d007      	beq.n	80028d4 <TIM_OC2_SetConfig+0xa0>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a19      	ldr	r2, [pc, #100]	; (800292c <TIM_OC2_SetConfig+0xf8>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d003      	beq.n	80028d4 <TIM_OC2_SetConfig+0xa0>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a18      	ldr	r2, [pc, #96]	; (8002930 <TIM_OC2_SetConfig+0xfc>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d113      	bne.n	80028fc <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028da:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028e2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	621a      	str	r2, [r3, #32]
}
 8002916:	bf00      	nop
 8002918:	371c      	adds	r7, #28
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40012c00 	.word	0x40012c00
 8002928:	40014000 	.word	0x40014000
 800292c:	40014400 	.word	0x40014400
 8002930:	40014800 	.word	0x40014800

08002934 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002934:	b480      	push	{r7}
 8002936:	b087      	sub	sp, #28
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f023 0303 	bic.w	r3, r3, #3
 800296e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	4313      	orrs	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002980:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	4313      	orrs	r3, r2
 800298c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a23      	ldr	r2, [pc, #140]	; (8002a20 <TIM_OC3_SetConfig+0xec>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d10d      	bne.n	80029b2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800299c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	021b      	lsls	r3, r3, #8
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029b0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a1a      	ldr	r2, [pc, #104]	; (8002a20 <TIM_OC3_SetConfig+0xec>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d00b      	beq.n	80029d2 <TIM_OC3_SetConfig+0x9e>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a19      	ldr	r2, [pc, #100]	; (8002a24 <TIM_OC3_SetConfig+0xf0>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d007      	beq.n	80029d2 <TIM_OC3_SetConfig+0x9e>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a18      	ldr	r2, [pc, #96]	; (8002a28 <TIM_OC3_SetConfig+0xf4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d003      	beq.n	80029d2 <TIM_OC3_SetConfig+0x9e>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a17      	ldr	r2, [pc, #92]	; (8002a2c <TIM_OC3_SetConfig+0xf8>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d113      	bne.n	80029fa <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	011b      	lsls	r3, r3, #4
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	011b      	lsls	r3, r3, #4
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	621a      	str	r2, [r3, #32]
}
 8002a14:	bf00      	nop
 8002a16:	371c      	adds	r7, #28
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	40012c00 	.word	0x40012c00
 8002a24:	40014000 	.word	0x40014000
 8002a28:	40014400 	.word	0x40014400
 8002a2c:	40014800 	.word	0x40014800

08002a30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b087      	sub	sp, #28
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	021b      	lsls	r3, r3, #8
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	031b      	lsls	r3, r3, #12
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a16      	ldr	r2, [pc, #88]	; (8002ae8 <TIM_OC4_SetConfig+0xb8>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d00b      	beq.n	8002aac <TIM_OC4_SetConfig+0x7c>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a15      	ldr	r2, [pc, #84]	; (8002aec <TIM_OC4_SetConfig+0xbc>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d007      	beq.n	8002aac <TIM_OC4_SetConfig+0x7c>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a14      	ldr	r2, [pc, #80]	; (8002af0 <TIM_OC4_SetConfig+0xc0>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d003      	beq.n	8002aac <TIM_OC4_SetConfig+0x7c>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a13      	ldr	r2, [pc, #76]	; (8002af4 <TIM_OC4_SetConfig+0xc4>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d109      	bne.n	8002ac0 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ab2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	019b      	lsls	r3, r3, #6
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	621a      	str	r2, [r3, #32]
}
 8002ada:	bf00      	nop
 8002adc:	371c      	adds	r7, #28
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	40012c00 	.word	0x40012c00
 8002aec:	40014000 	.word	0x40014000
 8002af0:	40014400 	.word	0x40014400
 8002af4:	40014800 	.word	0x40014800

08002af8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b087      	sub	sp, #28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002b3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	041b      	lsls	r3, r3, #16
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a15      	ldr	r2, [pc, #84]	; (8002ba4 <TIM_OC5_SetConfig+0xac>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d00b      	beq.n	8002b6a <TIM_OC5_SetConfig+0x72>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a14      	ldr	r2, [pc, #80]	; (8002ba8 <TIM_OC5_SetConfig+0xb0>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d007      	beq.n	8002b6a <TIM_OC5_SetConfig+0x72>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a13      	ldr	r2, [pc, #76]	; (8002bac <TIM_OC5_SetConfig+0xb4>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d003      	beq.n	8002b6a <TIM_OC5_SetConfig+0x72>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a12      	ldr	r2, [pc, #72]	; (8002bb0 <TIM_OC5_SetConfig+0xb8>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d109      	bne.n	8002b7e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	021b      	lsls	r3, r3, #8
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	621a      	str	r2, [r3, #32]
}
 8002b98:	bf00      	nop
 8002b9a:	371c      	adds	r7, #28
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	40012c00 	.word	0x40012c00
 8002ba8:	40014000 	.word	0x40014000
 8002bac:	40014400 	.word	0x40014400
 8002bb0:	40014800 	.word	0x40014800

08002bb4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b087      	sub	sp, #28
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	021b      	lsls	r3, r3, #8
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002bfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	051b      	lsls	r3, r3, #20
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a16      	ldr	r2, [pc, #88]	; (8002c64 <TIM_OC6_SetConfig+0xb0>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d00b      	beq.n	8002c28 <TIM_OC6_SetConfig+0x74>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a15      	ldr	r2, [pc, #84]	; (8002c68 <TIM_OC6_SetConfig+0xb4>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d007      	beq.n	8002c28 <TIM_OC6_SetConfig+0x74>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a14      	ldr	r2, [pc, #80]	; (8002c6c <TIM_OC6_SetConfig+0xb8>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d003      	beq.n	8002c28 <TIM_OC6_SetConfig+0x74>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a13      	ldr	r2, [pc, #76]	; (8002c70 <TIM_OC6_SetConfig+0xbc>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d109      	bne.n	8002c3c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	029b      	lsls	r3, r3, #10
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	621a      	str	r2, [r3, #32]
}
 8002c56:	bf00      	nop
 8002c58:	371c      	adds	r7, #28
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40012c00 	.word	0x40012c00
 8002c68:	40014000 	.word	0x40014000
 8002c6c:	40014400 	.word	0x40014400
 8002c70:	40014800 	.word	0x40014800

08002c74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b087      	sub	sp, #28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	f023 0201 	bic.w	r2, r3, #1
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	011b      	lsls	r3, r3, #4
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f023 030a 	bic.w	r3, r3, #10
 8002cb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	621a      	str	r2, [r3, #32]
}
 8002cc6:	bf00      	nop
 8002cc8:	371c      	adds	r7, #28
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b087      	sub	sp, #28
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	60f8      	str	r0, [r7, #12]
 8002cda:	60b9      	str	r1, [r7, #8]
 8002cdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	f023 0210 	bic.w	r2, r3, #16
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cfc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	031b      	lsls	r3, r3, #12
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	011b      	lsls	r3, r3, #4
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	621a      	str	r2, [r3, #32]
}
 8002d26:	bf00      	nop
 8002d28:	371c      	adds	r7, #28
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b085      	sub	sp, #20
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
 8002d3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	f043 0307 	orr.w	r3, r3, #7
 8002d54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	609a      	str	r2, [r3, #8]
}
 8002d5c:	bf00      	nop
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b087      	sub	sp, #28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
 8002d74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	021a      	lsls	r2, r3, #8
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	609a      	str	r2, [r3, #8]
}
 8002d9c:	bf00      	nop
 8002d9e:	371c      	adds	r7, #28
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b087      	sub	sp, #28
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	f003 031f 	and.w	r3, r3, #31
 8002dba:	2201      	movs	r2, #1
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6a1a      	ldr	r2, [r3, #32]
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	401a      	ands	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6a1a      	ldr	r2, [r3, #32]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	f003 031f 	and.w	r3, r3, #31
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8002de0:	431a      	orrs	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	621a      	str	r2, [r3, #32]
}
 8002de6:	bf00      	nop
 8002de8:	371c      	adds	r7, #28
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
	...

08002df4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d101      	bne.n	8002e0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	e054      	b.n	8002eb6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2202      	movs	r2, #2
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a24      	ldr	r2, [pc, #144]	; (8002ec4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d108      	bne.n	8002e48 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002e3c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a17      	ldr	r2, [pc, #92]	; (8002ec4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d00e      	beq.n	8002e8a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e74:	d009      	beq.n	8002e8a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a13      	ldr	r2, [pc, #76]	; (8002ec8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d004      	beq.n	8002e8a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a11      	ldr	r2, [pc, #68]	; (8002ecc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d10c      	bne.n	8002ea4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68ba      	ldr	r2, [r7, #8]
 8002ea2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	40012c00 	.word	0x40012c00
 8002ec8:	40000400 	.word	0x40000400
 8002ecc:	40014000 	.word	0x40014000

08002ed0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e040      	b.n	8002f64 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d106      	bne.n	8002ef8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7fd fb44 	bl	8000580 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2224      	movs	r2, #36	; 0x24
 8002efc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0201 	bic.w	r2, r2, #1
 8002f0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f82c 	bl	8002f6c <UART_SetConfig>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d101      	bne.n	8002f1e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e022      	b.n	8002f64 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d002      	beq.n	8002f2c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f956 	bl	80031d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0201 	orr.w	r2, r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f9dd 	bl	800331c <UART_CheckIdleState>
 8002f62:	4603      	mov	r3, r0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b088      	sub	sp, #32
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f74:	2300      	movs	r3, #0
 8002f76:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	431a      	orrs	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	431a      	orrs	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	4b8a      	ldr	r3, [pc, #552]	; (80031c0 <UART_SetConfig+0x254>)
 8002f98:	4013      	ands	r3, r2
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6812      	ldr	r2, [r2, #0]
 8002f9e:	6979      	ldr	r1, [r7, #20]
 8002fa0:	430b      	orrs	r3, r1
 8002fa2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a78      	ldr	r2, [pc, #480]	; (80031c4 <UART_SetConfig+0x258>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d120      	bne.n	800302a <UART_SetConfig+0xbe>
 8002fe8:	4b77      	ldr	r3, [pc, #476]	; (80031c8 <UART_SetConfig+0x25c>)
 8002fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fec:	f003 0303 	and.w	r3, r3, #3
 8002ff0:	2b03      	cmp	r3, #3
 8002ff2:	d817      	bhi.n	8003024 <UART_SetConfig+0xb8>
 8002ff4:	a201      	add	r2, pc, #4	; (adr r2, 8002ffc <UART_SetConfig+0x90>)
 8002ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffa:	bf00      	nop
 8002ffc:	0800300d 	.word	0x0800300d
 8003000:	08003019 	.word	0x08003019
 8003004:	0800301f 	.word	0x0800301f
 8003008:	08003013 	.word	0x08003013
 800300c:	2300      	movs	r3, #0
 800300e:	77fb      	strb	r3, [r7, #31]
 8003010:	e01d      	b.n	800304e <UART_SetConfig+0xe2>
 8003012:	2302      	movs	r3, #2
 8003014:	77fb      	strb	r3, [r7, #31]
 8003016:	e01a      	b.n	800304e <UART_SetConfig+0xe2>
 8003018:	2304      	movs	r3, #4
 800301a:	77fb      	strb	r3, [r7, #31]
 800301c:	e017      	b.n	800304e <UART_SetConfig+0xe2>
 800301e:	2308      	movs	r3, #8
 8003020:	77fb      	strb	r3, [r7, #31]
 8003022:	e014      	b.n	800304e <UART_SetConfig+0xe2>
 8003024:	2310      	movs	r3, #16
 8003026:	77fb      	strb	r3, [r7, #31]
 8003028:	e011      	b.n	800304e <UART_SetConfig+0xe2>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a67      	ldr	r2, [pc, #412]	; (80031cc <UART_SetConfig+0x260>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d102      	bne.n	800303a <UART_SetConfig+0xce>
 8003034:	2300      	movs	r3, #0
 8003036:	77fb      	strb	r3, [r7, #31]
 8003038:	e009      	b.n	800304e <UART_SetConfig+0xe2>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a64      	ldr	r2, [pc, #400]	; (80031d0 <UART_SetConfig+0x264>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d102      	bne.n	800304a <UART_SetConfig+0xde>
 8003044:	2300      	movs	r3, #0
 8003046:	77fb      	strb	r3, [r7, #31]
 8003048:	e001      	b.n	800304e <UART_SetConfig+0xe2>
 800304a:	2310      	movs	r3, #16
 800304c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003056:	d15b      	bne.n	8003110 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8003058:	7ffb      	ldrb	r3, [r7, #31]
 800305a:	2b08      	cmp	r3, #8
 800305c:	d827      	bhi.n	80030ae <UART_SetConfig+0x142>
 800305e:	a201      	add	r2, pc, #4	; (adr r2, 8003064 <UART_SetConfig+0xf8>)
 8003060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003064:	08003089 	.word	0x08003089
 8003068:	08003091 	.word	0x08003091
 800306c:	08003099 	.word	0x08003099
 8003070:	080030af 	.word	0x080030af
 8003074:	0800309f 	.word	0x0800309f
 8003078:	080030af 	.word	0x080030af
 800307c:	080030af 	.word	0x080030af
 8003080:	080030af 	.word	0x080030af
 8003084:	080030a7 	.word	0x080030a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003088:	f7fe ff18 	bl	8001ebc <HAL_RCC_GetPCLK1Freq>
 800308c:	61b8      	str	r0, [r7, #24]
        break;
 800308e:	e013      	b.n	80030b8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003090:	f7fe ff36 	bl	8001f00 <HAL_RCC_GetPCLK2Freq>
 8003094:	61b8      	str	r0, [r7, #24]
        break;
 8003096:	e00f      	b.n	80030b8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003098:	4b4e      	ldr	r3, [pc, #312]	; (80031d4 <UART_SetConfig+0x268>)
 800309a:	61bb      	str	r3, [r7, #24]
        break;
 800309c:	e00c      	b.n	80030b8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800309e:	f7fe fe97 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 80030a2:	61b8      	str	r0, [r7, #24]
        break;
 80030a4:	e008      	b.n	80030b8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030aa:	61bb      	str	r3, [r7, #24]
        break;
 80030ac:	e004      	b.n	80030b8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	77bb      	strb	r3, [r7, #30]
        break;
 80030b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d074      	beq.n	80031a8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	005a      	lsls	r2, r3, #1
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	085b      	lsrs	r3, r3, #1
 80030c8:	441a      	add	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	2b0f      	cmp	r3, #15
 80030da:	d916      	bls.n	800310a <UART_SetConfig+0x19e>
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e2:	d212      	bcs.n	800310a <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	f023 030f 	bic.w	r3, r3, #15
 80030ec:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	085b      	lsrs	r3, r3, #1
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	89fb      	ldrh	r3, [r7, #14]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	89fa      	ldrh	r2, [r7, #14]
 8003106:	60da      	str	r2, [r3, #12]
 8003108:	e04e      	b.n	80031a8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	77bb      	strb	r3, [r7, #30]
 800310e:	e04b      	b.n	80031a8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003110:	7ffb      	ldrb	r3, [r7, #31]
 8003112:	2b08      	cmp	r3, #8
 8003114:	d827      	bhi.n	8003166 <UART_SetConfig+0x1fa>
 8003116:	a201      	add	r2, pc, #4	; (adr r2, 800311c <UART_SetConfig+0x1b0>)
 8003118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311c:	08003141 	.word	0x08003141
 8003120:	08003149 	.word	0x08003149
 8003124:	08003151 	.word	0x08003151
 8003128:	08003167 	.word	0x08003167
 800312c:	08003157 	.word	0x08003157
 8003130:	08003167 	.word	0x08003167
 8003134:	08003167 	.word	0x08003167
 8003138:	08003167 	.word	0x08003167
 800313c:	0800315f 	.word	0x0800315f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003140:	f7fe febc 	bl	8001ebc <HAL_RCC_GetPCLK1Freq>
 8003144:	61b8      	str	r0, [r7, #24]
        break;
 8003146:	e013      	b.n	8003170 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003148:	f7fe feda 	bl	8001f00 <HAL_RCC_GetPCLK2Freq>
 800314c:	61b8      	str	r0, [r7, #24]
        break;
 800314e:	e00f      	b.n	8003170 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003150:	4b20      	ldr	r3, [pc, #128]	; (80031d4 <UART_SetConfig+0x268>)
 8003152:	61bb      	str	r3, [r7, #24]
        break;
 8003154:	e00c      	b.n	8003170 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003156:	f7fe fe3b 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 800315a:	61b8      	str	r0, [r7, #24]
        break;
 800315c:	e008      	b.n	8003170 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800315e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003162:	61bb      	str	r3, [r7, #24]
        break;
 8003164:	e004      	b.n	8003170 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003166:	2300      	movs	r3, #0
 8003168:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	77bb      	strb	r3, [r7, #30]
        break;
 800316e:	bf00      	nop
    }

    if (pclk != 0U)
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d018      	beq.n	80031a8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	085a      	lsrs	r2, r3, #1
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	441a      	add	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	fbb2 f3f3 	udiv	r3, r2, r3
 8003188:	b29b      	uxth	r3, r3
 800318a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	2b0f      	cmp	r3, #15
 8003190:	d908      	bls.n	80031a4 <UART_SetConfig+0x238>
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003198:	d204      	bcs.n	80031a4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	60da      	str	r2, [r3, #12]
 80031a2:	e001      	b.n	80031a8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80031b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3720      	adds	r7, #32
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	efff69f3 	.word	0xefff69f3
 80031c4:	40013800 	.word	0x40013800
 80031c8:	40021000 	.word	0x40021000
 80031cc:	40004400 	.word	0x40004400
 80031d0:	40004800 	.word	0x40004800
 80031d4:	007a1200 	.word	0x007a1200

080031d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00a      	beq.n	8003202 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00a      	beq.n	8003224 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00a      	beq.n	8003246 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00a      	beq.n	8003268 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	f003 0310 	and.w	r3, r3, #16
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00a      	beq.n	800328a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	f003 0320 	and.w	r3, r3, #32
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00a      	beq.n	80032ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d01a      	beq.n	80032ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032d6:	d10a      	bne.n	80032ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	605a      	str	r2, [r3, #4]
  }
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af02      	add	r7, sp, #8
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800332c:	f7fd fa2c 	bl	8000788 <HAL_GetTick>
 8003330:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0308 	and.w	r3, r3, #8
 800333c:	2b08      	cmp	r3, #8
 800333e:	d10e      	bne.n	800335e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003340:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f82d 	bl	80033ae <UART_WaitOnFlagUntilTimeout>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e023      	b.n	80033a6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b04      	cmp	r3, #4
 800336a:	d10e      	bne.n	800338a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800336c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003370:	9300      	str	r3, [sp, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f817 	bl	80033ae <UART_WaitOnFlagUntilTimeout>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e00d      	b.n	80033a6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2220      	movs	r2, #32
 800338e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2220      	movs	r2, #32
 8003394:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b084      	sub	sp, #16
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	60f8      	str	r0, [r7, #12]
 80033b6:	60b9      	str	r1, [r7, #8]
 80033b8:	603b      	str	r3, [r7, #0]
 80033ba:	4613      	mov	r3, r2
 80033bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033be:	e05e      	b.n	800347e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c6:	d05a      	beq.n	800347e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033c8:	f7fd f9de 	bl	8000788 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d302      	bcc.n	80033de <UART_WaitOnFlagUntilTimeout+0x30>
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d11b      	bne.n	8003416 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033ec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0201 	bic.w	r2, r2, #1
 80033fc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2220      	movs	r2, #32
 8003402:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2220      	movs	r2, #32
 8003408:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e043      	b.n	800349e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	d02c      	beq.n	800347e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800342e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003432:	d124      	bne.n	800347e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800343c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800344c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 0201 	bic.w	r2, r2, #1
 800345c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2220      	movs	r2, #32
 8003462:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2220      	movs	r2, #32
 8003468:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2220      	movs	r2, #32
 800346e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e00f      	b.n	800349e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	69da      	ldr	r2, [r3, #28]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4013      	ands	r3, r2
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	429a      	cmp	r2, r3
 800348c:	bf0c      	ite	eq
 800348e:	2301      	moveq	r3, #1
 8003490:	2300      	movne	r3, #0
 8003492:	b2db      	uxtb	r3, r3
 8003494:	461a      	mov	r2, r3
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	429a      	cmp	r2, r3
 800349a:	d091      	beq.n	80033c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
	...

080034a8 <__libc_init_array>:
 80034a8:	b570      	push	{r4, r5, r6, lr}
 80034aa:	4d0d      	ldr	r5, [pc, #52]	; (80034e0 <__libc_init_array+0x38>)
 80034ac:	4c0d      	ldr	r4, [pc, #52]	; (80034e4 <__libc_init_array+0x3c>)
 80034ae:	1b64      	subs	r4, r4, r5
 80034b0:	10a4      	asrs	r4, r4, #2
 80034b2:	2600      	movs	r6, #0
 80034b4:	42a6      	cmp	r6, r4
 80034b6:	d109      	bne.n	80034cc <__libc_init_array+0x24>
 80034b8:	4d0b      	ldr	r5, [pc, #44]	; (80034e8 <__libc_init_array+0x40>)
 80034ba:	4c0c      	ldr	r4, [pc, #48]	; (80034ec <__libc_init_array+0x44>)
 80034bc:	f000 f820 	bl	8003500 <_init>
 80034c0:	1b64      	subs	r4, r4, r5
 80034c2:	10a4      	asrs	r4, r4, #2
 80034c4:	2600      	movs	r6, #0
 80034c6:	42a6      	cmp	r6, r4
 80034c8:	d105      	bne.n	80034d6 <__libc_init_array+0x2e>
 80034ca:	bd70      	pop	{r4, r5, r6, pc}
 80034cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80034d0:	4798      	blx	r3
 80034d2:	3601      	adds	r6, #1
 80034d4:	e7ee      	b.n	80034b4 <__libc_init_array+0xc>
 80034d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80034da:	4798      	blx	r3
 80034dc:	3601      	adds	r6, #1
 80034de:	e7f2      	b.n	80034c6 <__libc_init_array+0x1e>
 80034e0:	08003550 	.word	0x08003550
 80034e4:	08003550 	.word	0x08003550
 80034e8:	08003550 	.word	0x08003550
 80034ec:	08003554 	.word	0x08003554

080034f0 <memset>:
 80034f0:	4402      	add	r2, r0
 80034f2:	4603      	mov	r3, r0
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d100      	bne.n	80034fa <memset+0xa>
 80034f8:	4770      	bx	lr
 80034fa:	f803 1b01 	strb.w	r1, [r3], #1
 80034fe:	e7f9      	b.n	80034f4 <memset+0x4>

08003500 <_init>:
 8003500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003502:	bf00      	nop
 8003504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003506:	bc08      	pop	{r3}
 8003508:	469e      	mov	lr, r3
 800350a:	4770      	bx	lr

0800350c <_fini>:
 800350c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800350e:	bf00      	nop
 8003510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003512:	bc08      	pop	{r3}
 8003514:	469e      	mov	lr, r3
 8003516:	4770      	bx	lr
